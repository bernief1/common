// ==============
// common/dds.cpp
// ==============

#include "dds.h"

#define STB_DXT_IMPLEMENTATION
#include "GraphicsTools/external/stb/stb_dxt.h"

#include "vmath/vmath_color.h"
#include "vmath/vmath_float16.h"
#include "vmath/vmath_floatvec.h"

bool CompareDDSPixelFormatMask(const DDS_DDPIXELFORMAT& ddpf, uint32 flags, uint32 bitCount, uint32 rMask, uint32 gMask, uint32 bMask, uint32 aMask)
{
	return
	(
		ddpf.dwFlags       == flags    &&
		ddpf.dwRGBBitCount == bitCount &&
		ddpf.dwRBitMask    == rMask    &&
		ddpf.dwGBitMask    == gMask    &&
		ddpf.dwBBitMask    == bMask    &&
		ddpf.dwABitMask    == aMask
	);
}

DDS_D3DFORMAT GetD3DFormatFromDDSPixelFormat(const DDS_DDPIXELFORMAT& ddpf)
{
	if      (CompareDDSPixelFormatMask(ddpf, DDS_DDPF_RGBA           , 32, 0x00FF0000, 0x0000FF00, 0x000000FF, 0xFF000000)) { return DDS_D3DFMT_A8R8G8B8   ; }
	else if (CompareDDSPixelFormatMask(ddpf, DDS_DDPF_RGBA           , 32, 0x000000FF, 0x0000FF00, 0x00FF0000, 0xFF000000)) { return DDS_D3DFMT_A8B8G8R8   ; }
	else if (CompareDDSPixelFormatMask(ddpf, DDS_DDPF_ALPHA          ,  8, 0x00000000, 0x00000000, 0x00000000, 0x000000FF)) { return DDS_D3DFMT_A8         ; }
	else if (CompareDDSPixelFormatMask(ddpf, DDS_DDPF_LUMINANCE      ,  8, 0x000000FF, 0x00000000, 0x00000000, 0x00000000)) { return DDS_D3DFMT_L8         ; }
	else if (CompareDDSPixelFormatMask(ddpf, DDS_DDPF_LUMINANCE_ALPHA, 16, 0x000000FF, 0x00000000, 0x00000000, 0x0000FF00)) { return DDS_D3DFMT_A8L8       ; }
	else if (CompareDDSPixelFormatMask(ddpf, DDS_DDPF_RGBA           , 16, 0x00000F00, 0x000000F0, 0x0000000F, 0x0000F000)) { return DDS_D3DFMT_A4R4G4B4   ; }
	else if (CompareDDSPixelFormatMask(ddpf, DDS_DDPF_RGBA           , 16, 0x00007C00, 0x000003E0, 0x0000001F, 0x00008000)) { return DDS_D3DFMT_A1R5G5B5   ; }
	else if (CompareDDSPixelFormatMask(ddpf, DDS_DDPF_RGB            , 16, 0x0000F800, 0x000007E0, 0x0000001F, 0x00000000)) { return DDS_D3DFMT_R5G6B5     ; }
	else if (CompareDDSPixelFormatMask(ddpf, DDS_DDPF_RGB            ,  8, 0x000000E0, 0x0000001C, 0x00000003, 0x0000FF00)) { return DDS_D3DFMT_R3G3B2     ; }
	else if (CompareDDSPixelFormatMask(ddpf, DDS_DDPF_RGBA           , 16, 0x000000E0, 0x0000001C, 0x00000003, 0x0000FF00)) { return DDS_D3DFMT_A8R3G3B2   ; }
	else if (CompareDDSPixelFormatMask(ddpf, DDS_DDPF_LUMINANCE_ALPHA,  8, 0x0000000F, 0x00000000, 0x00000000, 0x000000F0)) { return DDS_D3DFMT_A4L4       ; }
	else if (CompareDDSPixelFormatMask(ddpf, DDS_DDPF_RGBA           , 32, 0x3FF00000, 0x000FFC00, 0x000003FF, 0xC0000000)) { return DDS_D3DFMT_A2R10G10B10; }
	else if (CompareDDSPixelFormatMask(ddpf, DDS_DDPF_RGBA           , 32, 0x000003FF, 0x000FFC00, 0x3FF00000, 0xC0000000)) { return DDS_D3DFMT_A2B10G10R10; }
	else if (CompareDDSPixelFormatMask(ddpf, DDS_DDPF_RGB            , 32, 0x0000FFFF, 0xFFFF0000, 0x00000000, 0x00000000)) { return DDS_D3DFMT_G16R16     ; }
	else if (CompareDDSPixelFormatMask(ddpf, DDS_DDPF_LUMINANCE      , 16, 0x0000FFFF, 0x00000000, 0x00000000, 0x00000000)) { return DDS_D3DFMT_L16        ; }
	// support XRGB/XBGR formats too ..
	else if (CompareDDSPixelFormatMask(ddpf, DDS_DDPF_RGB            , 32, 0x00FF0000, 0x0000FF00, 0x000000FF, 0x00000000)) { return DDS_D3DFMT_X8R8G8B8   ; }
	else if (CompareDDSPixelFormatMask(ddpf, DDS_DDPF_RGB            , 32, 0x000000FF, 0x0000FF00, 0x00FF0000, 0x00000000)) { return DDS_D3DFMT_X8B8G8R8   ; }
	else if (CompareDDSPixelFormatMask(ddpf, DDS_DDPF_RGB            , 16, 0x00000F00, 0x000000F0, 0x0000000F, 0x00000000)) { return DDS_D3DFMT_X4R4G4B4   ; }
	else if (CompareDDSPixelFormatMask(ddpf, DDS_DDPF_RGB            , 16, 0x00007C00, 0x000003E0, 0x0000001F, 0x00000000)) { return DDS_D3DFMT_X1R5G5B5   ; }

	return DDS_D3DFMT_UNKNOWN;
}

const char* GetD3DFormatStr(DDS_D3DFORMAT format, bool shortName)
{
	const char* name = NULL;
	switch ((int)format)
	{
#define DEF_DDS_D3DFMT_CASE(f) case f: name = #f; break
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_UNKNOWN            );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_R8G8B8             );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_A8R8G8B8           );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_X8R8G8B8           );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_R5G6B5             );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_X1R5G5B5           );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_A1R5G5B5           );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_A4R4G4B4           );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_R3G3B2             );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_A8                 );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_A8R3G3B2           );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_X4R4G4B4           );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_A2B10G10R10        );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_A8B8G8R8           );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_X8B8G8R8           );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_G16R16             );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_A2R10G10B10        );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_A16B16G16R16       );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_A8P8               );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_P8                 );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_L8                 );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_A8L8               );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_A4L4               );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_V8U8               );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_L6V5U5             );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_X8L8V8U8           );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_Q8W8V8U8           );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_V16U16             );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_A2W10V10U10        );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_UYVY               );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_R8G8_B8G8          );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_YUY2               );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_G8R8_G8B8          );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_DXT1               );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_DXT2               );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_DXT3               );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_DXT4               );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_DXT5               );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_D16_LOCKABLE       );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_D32                );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_D15S1              );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_D24S8              );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_D24X8              );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_D24X4S4            );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_D16                );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_D32F_LOCKABLE      );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_D24FS8             );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_D32_LOCKABLE       );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_S8_LOCKABLE        );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_L16                );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_VERTEXDATA         );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_INDEX16            );
		DEF_DDS_D3DFMT_CASE(DDS_D3DFMT_INDEX32            );
#undef DEF_DDS_D3DFMT_CASE
	}
	if (name) {
		if (shortName)
			name += strlen("DDS_D3DFMT_");
	} else
		name = "UNKNOWN";
	return name;
}

const char* GetDX10FormatStr(DDS_DXGI_FORMAT format, bool shortName)
{
	const char* name = NULL;
	switch ((int)format)
	{
#define DEF_DDS_DXGI_FORMAT_CASE(f) case f: name = #f; break
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_UNKNOWN                   );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R32G32B32A32_TYPELESS     );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R32G32B32A32_FLOAT        );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R32G32B32A32_UINT         );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R32G32B32A32_SINT         );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R32G32B32_TYPELESS        );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R32G32B32_FLOAT           );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R32G32B32_UINT            );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R32G32B32_SINT            );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R16G16B16A16_TYPELESS     );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R16G16B16A16_FLOAT        );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R16G16B16A16_UNORM        );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R16G16B16A16_UINT         );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R16G16B16A16_SNORM        );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R16G16B16A16_SINT         );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R32G32_TYPELESS           );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R32G32_FLOAT              );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R32G32_UINT               );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R32G32_SINT               );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R32G8X24_TYPELESS         );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_D32_FLOAT_S8X24_UINT      );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS  );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_X32_TYPELESS_G8X24_UINT   );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R10G10B10A2_TYPELESS      );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R10G10B10A2_UNORM         );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R10G10B10A2_UINT          );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R11G11B10_FLOAT           );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R8G8B8A8_TYPELESS         );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R8G8B8A8_UNORM            );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R8G8B8A8_UNORM_SRGB       );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R8G8B8A8_UINT             );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R8G8B8A8_SNORM            );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R8G8B8A8_SINT             );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R16G16_TYPELESS           );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R16G16_FLOAT              );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R16G16_UNORM              );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R16G16_UINT               );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R16G16_SNORM              );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R16G16_SINT               );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R32_TYPELESS              );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_D32_FLOAT                 );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R32_FLOAT                 );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R32_UINT                  );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R32_SINT                  );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R24G8_TYPELESS            );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_D24_UNORM_S8_UINT         );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R24_UNORM_X8_TYPELESS     );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_X24_TYPELESS_G8_UINT      );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R8G8_TYPELESS             );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R8G8_UNORM                );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R8G8_UINT                 );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R8G8_SNORM                );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R8G8_SINT                 );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R16_TYPELESS              );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R16_FLOAT                 );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_D16_UNORM                 );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R16_UNORM                 );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R16_UINT                  );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R16_SNORM                 );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R16_SINT                  );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R8_TYPELESS               );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R8_UNORM                  );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R8_UINT                   );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R8_SNORM                  );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R8_SINT                   );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_A8_UNORM                  );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R1_UNORM                  );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R9G9B9E5_SHAREDEXP        );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R8G8_B8G8_UNORM           );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_G8R8_G8B8_UNORM           );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_BC1_TYPELESS              );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_BC1_UNORM                 );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_BC1_UNORM_SRGB            );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_BC2_TYPELESS              );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_BC2_UNORM                 );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_BC2_UNORM_SRGB            );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_BC3_TYPELESS              );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_BC3_UNORM                 );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_BC3_UNORM_SRGB            );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_BC4_TYPELESS              );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_BC4_UNORM                 );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_BC4_SNORM                 );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_BC5_TYPELESS              );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_BC5_UNORM                 );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_BC5_SNORM                 );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_B5G6R5_UNORM              );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_B5G5R5A1_UNORM            );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_B8G8R8A8_UNORM            );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_B8G8R8X8_UNORM            );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM);
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_B8G8R8A8_TYPELESS         );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_B8G8R8A8_UNORM_SRGB       );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_B8G8R8X8_TYPELESS         );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_B8G8R8X8_UNORM_SRGB       );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_BC6H_TYPELESS             );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_BC6H_UF16                 );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_BC6H_SF16                 );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_BC7_TYPELESS              );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_BC7_UNORM                 );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_BC7_UNORM_SRGB            );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_AYUV                      );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_Y410                      );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_Y416                      );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_NV12                      );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_P010                      );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_P016                      );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_420_OPAQUE                );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_YUY2                      );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_Y210                      );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_Y216                      );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_NV11                      );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_AI44                      );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_IA44                      );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_P8                        );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_A8P8                      );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_B4G4R4A4_UNORM            );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R10G10B10_7E3_A2_FLOAT    );
		DEF_DDS_DXGI_FORMAT_CASE(DDS_DXGI_FORMAT_R10G10B10_6E4_A2_FLOAT    );
#undef  DEF_DDS_DXGI_FORMAT_CASE
	}
	if (name) {
		if (shortName)
			name += strlen("DDS_DXGI_FORMAT_");
	} else
		name = "UNKNOWN";
	return name;
}

DDS_DXGI_FORMAT GetDX10FormatFromString(const char* str)
{
	for (uint32 i = 0; i < DDS_DXGI_FORMAT_LAST; i++) {
		const DDS_DXGI_FORMAT format = (DDS_DXGI_FORMAT)i;
		if (stricmp(str, GetDX10FormatStr(format, true)) == 0)
			return format;
	}
	return DDS_DXGI_FORMAT_UNKNOWN;
}

DDS_DXGI_FORMAT GetDX10FormatFromDDSPixelFormat(const DDS_DDPIXELFORMAT& ddpf)
{
	switch (ddpf.dwFourCC)
	{
	case DDS_D3DFMT_A8R8G8B8            : return DDS_DXGI_FORMAT_B8G8R8A8_UNORM            ;
	case DDS_D3DFMT_X8R8G8B8            : return DDS_DXGI_FORMAT_B8G8R8X8_UNORM            ;
	case DDS_D3DFMT_A8B8G8R8            : return DDS_DXGI_FORMAT_R8G8B8A8_UNORM            ;
	case DDS_D3DFMT_X8B8G8R8            : return DDS_DXGI_FORMAT_R8G8B8A8_UNORM            ; // close enough (should be R8G8B8X8_UNORM)
	case DDS_D3DFMT_R5G6B5              : return DDS_DXGI_FORMAT_B5G6R5_UNORM              ;
	case DDS_D3DFMT_X1R5G5B5            : return DDS_DXGI_FORMAT_B5G5R5A1_UNORM            ; // close enough (should be B5G5R5X1_UNORM)
	case DDS_D3DFMT_A1R5G5B5            : return DDS_DXGI_FORMAT_B5G5R5A1_UNORM            ;
	case DDS_D3DFMT_A4R4G4B4            : return DDS_DXGI_FORMAT_B4G4R4A4_UNORM            ;
	case DDS_D3DFMT_R3G3B2              : return DDS_DXGI_FORMAT_UNKNOWN                   ;
	case DDS_D3DFMT_A8                  : return DDS_DXGI_FORMAT_A8_UNORM                  ;
	case DDS_D3DFMT_A8R3G3B2            : return DDS_DXGI_FORMAT_UNKNOWN                   ;
	case DDS_D3DFMT_X4R4G4B4            : return DDS_DXGI_FORMAT_B4G4R4A4_UNORM            ; // close enough (should be B4G4R4X4_UNORM)
	case DDS_D3DFMT_A2B10G10R10         : return DDS_DXGI_FORMAT_R10G10B10A2_UNORM         ;
	case DDS_D3DFMT_A2R10G10B10         : return DDS_DXGI_FORMAT_R10G10B10A2_UNORM         ; // meh .. closest i guess
	case DDS_D3DFMT_G16R16              : return DDS_DXGI_FORMAT_R16G16_UNORM              ;
	case DDS_D3DFMT_A16B16G16R16        : return DDS_DXGI_FORMAT_R16G16B16A16_UNORM        ;
	case DDS_D3DFMT_L8                  : return DDS_DXGI_FORMAT_R8_UNORM                  ; // meh .. closest i guess
	case DDS_D3DFMT_A8L8                : return DDS_DXGI_FORMAT_R8G8_UNORM                ; // meh .. closest i guess
	case DDS_D3DFMT_A4L4                : return DDS_DXGI_FORMAT_UNKNOWN                   ;
	case DDS_D3DFMT_R8G8_B8G8           : return DDS_DXGI_FORMAT_R8G8_B8G8_UNORM           ;
	case DDS_D3DFMT_G8R8_G8B8           : return DDS_DXGI_FORMAT_G8R8_G8B8_UNORM           ;
	case DDS_D3DFMT_DXT1                : return DDS_DXGI_FORMAT_BC1_UNORM                 ;
	case DDS_D3DFMT_DXT2                : return DDS_DXGI_FORMAT_BC2_UNORM                 ; // close enough
	case DDS_D3DFMT_DXT3                : return DDS_DXGI_FORMAT_BC2_UNORM                 ;
	case DDS_D3DFMT_DXT4                : return DDS_DXGI_FORMAT_BC3_UNORM                 ; // close enough
	case DDS_D3DFMT_DXT5                : return DDS_DXGI_FORMAT_BC3_UNORM                 ;
	case DDS_D3DFMT_R16F                : return DDS_DXGI_FORMAT_R16_FLOAT                 ;
	case DDS_D3DFMT_G16R16F             : return DDS_DXGI_FORMAT_R16G16_FLOAT              ;
	case DDS_D3DFMT_A16B16G16R16F       : return DDS_DXGI_FORMAT_R16G16B16A16_FLOAT        ;
	case DDS_D3DFMT_R32F                : return DDS_DXGI_FORMAT_R32_FLOAT                 ;
	case DDS_D3DFMT_G32R32F             : return DDS_DXGI_FORMAT_R32G32_FLOAT              ;
	case DDS_D3DFMT_A32B32G32R32F       : return DDS_DXGI_FORMAT_R32G32B32A32_FLOAT        ;
	case DDS_D3DFMT_A1                  : return DDS_DXGI_FORMAT_UNKNOWN                   ;
	case DDS_D3DFMT_A2B10G10R10_XR_BIAS : return DDS_DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM;
	// signed formats ..
	case DDS_D3DFMT_V8U8                : return DDS_DXGI_FORMAT_R8G8_SNORM                ;
	case DDS_D3DFMT_X8L8V8U8            : return DDS_DXGI_FORMAT_R8G8B8A8_SNORM            ; // close enough (should be R8G8B8X8_SNORM)
	case DDS_D3DFMT_Q8W8V8U8            : return DDS_DXGI_FORMAT_R8G8B8A8_SNORM            ;
	case DDS_D3DFMT_V16U16              : return DDS_DXGI_FORMAT_R16G16_SNORM              ;
	case DDS_D3DFMT_A2W10V10U10         : return DDS_DXGI_FORMAT_R10G10B10A2_UNORM         ; // meh .. closest i guess (should be R10G10B10_SNORM_A2_UNORM)
	case DDS_D3DFMT_Q16W16V16U16        : return DDS_DXGI_FORMAT_R16G16B16A16_SNORM        ;
	}

	if (ddpf.dwFourCC == DDS_MAKE_MAGIC_NUMBER('B','C','4','U')) { return DDS_DXGI_FORMAT_BC4_UNORM; }
	if (ddpf.dwFourCC == DDS_MAKE_MAGIC_NUMBER('B','C','5','U')) { return DDS_DXGI_FORMAT_BC5_UNORM; }

	if (CompareDDSPixelFormatMask(ddpf, DDS_DDPF_RGBA           , 32, 0x00FF0000, 0x0000FF00, 0x000000FF, 0xFF000000)) { return DDS_DXGI_FORMAT_B8G8R8A8_UNORM   ; }
	if (CompareDDSPixelFormatMask(ddpf, DDS_DDPF_RGBA           , 32, 0x000000FF, 0x0000FF00, 0x00FF0000, 0xFF000000)) { return DDS_DXGI_FORMAT_R8G8B8A8_UNORM   ; }
	if (CompareDDSPixelFormatMask(ddpf, DDS_DDPF_ALPHA          ,  8, 0x00000000, 0x00000000, 0x00000000, 0x000000FF)) { return DDS_DXGI_FORMAT_A8_UNORM         ; }
	if (CompareDDSPixelFormatMask(ddpf, DDS_DDPF_LUMINANCE      ,  8, 0x000000FF, 0x00000000, 0x00000000, 0x00000000)) { return DDS_DXGI_FORMAT_R8_UNORM         ; } // meh .. closest i guess
	if (CompareDDSPixelFormatMask(ddpf, DDS_DDPF_LUMINANCE_ALPHA, 16, 0x000000FF, 0x00000000, 0x00000000, 0x0000FF00)) { return DDS_DXGI_FORMAT_R8G8_UNORM       ; } // meh .. closest i guess
	if (CompareDDSPixelFormatMask(ddpf, DDS_DDPF_RGBA           , 16, 0x00000F00, 0x000000F0, 0x0000000F, 0x0000F000)) { return DDS_DXGI_FORMAT_B4G4R4A4_UNORM   ; }
	if (CompareDDSPixelFormatMask(ddpf, DDS_DDPF_RGBA           , 16, 0x00007C00, 0x000003E0, 0x0000001F, 0x00008000)) { return DDS_DXGI_FORMAT_B5G5R5A1_UNORM   ; }
	if (CompareDDSPixelFormatMask(ddpf, DDS_DDPF_RGB            , 16, 0x0000F800, 0x000007E0, 0x0000001F, 0x00000000)) { return DDS_DXGI_FORMAT_B5G6R5_UNORM     ; }
	if (CompareDDSPixelFormatMask(ddpf, DDS_DDPF_RGB            ,  8, 0x000000E0, 0x0000001C, 0x00000003, 0x0000FF00)) { return DDS_DXGI_FORMAT_UNKNOWN          ; } // 332 not supported
	if (CompareDDSPixelFormatMask(ddpf, DDS_DDPF_RGBA           , 16, 0x000000E0, 0x0000001C, 0x00000003, 0x0000FF00)) { return DDS_DXGI_FORMAT_UNKNOWN          ; } // 8332 not supported
	if (CompareDDSPixelFormatMask(ddpf, DDS_DDPF_LUMINANCE_ALPHA,  8, 0x0000000F, 0x00000000, 0x00000000, 0x000000F0)) { return DDS_DXGI_FORMAT_UNKNOWN          ; } // 44 not supported
	if (CompareDDSPixelFormatMask(ddpf, DDS_DDPF_RGBA           , 32, 0x3FF00000, 0x000FFC00, 0x000003FF, 0xC0000000)) { return DDS_DXGI_FORMAT_R10G10B10A2_UNORM; } // red/blue swapped
	if (CompareDDSPixelFormatMask(ddpf, DDS_DDPF_RGBA           , 32, 0x000003FF, 0x000FFC00, 0x3FF00000, 0xC0000000)) { return DDS_DXGI_FORMAT_R10G10B10A2_UNORM; }
	if (CompareDDSPixelFormatMask(ddpf, DDS_DDPF_RGB            , 32, 0x0000FFFF, 0xFFFF0000, 0x00000000, 0x00000000)) { return DDS_DXGI_FORMAT_R16G16_UNORM     ; }
	if (CompareDDSPixelFormatMask(ddpf, DDS_DDPF_LUMINANCE      , 16, 0x0000FFFF, 0x00000000, 0x00000000, 0x00000000)) { return DDS_DXGI_FORMAT_R16_UNORM        ; } // meh .. closest i guess
	if (CompareDDSPixelFormatMask(ddpf, DDS_DDPF_RGB            ,  8, 0x000000FF, 0x00000000, 0x00000000, 0x00000000)) { return DDS_DXGI_FORMAT_R8_UNORM         ; }
	if (CompareDDSPixelFormatMask(ddpf, DDS_DDPF_RGB            , 16, 0x0000FFFF, 0x00000000, 0x00000000, 0x00000000)) { return DDS_DXGI_FORMAT_R16_UNORM        ; }
	if (CompareDDSPixelFormatMask(ddpf, DDS_DDPF_RGB            , 16, 0x000000FF, 0x0000FF00, 0x00000000, 0x00000000)) { return DDS_DXGI_FORMAT_R8G8_UNORM       ; }
	// support XRGB/XBGR formats too ..
	if (CompareDDSPixelFormatMask(ddpf, DDS_DDPF_RGB            , 32, 0x00FF0000, 0x0000FF00, 0x000000FF, 0x00000000)) { return DDS_DXGI_FORMAT_B8G8R8X8_UNORM   ; }
	if (CompareDDSPixelFormatMask(ddpf, DDS_DDPF_RGB            , 32, 0x000000FF, 0x0000FF00, 0x00FF0000, 0x00000000)) { return DDS_DXGI_FORMAT_R8G8B8A8_UNORM   ; } // close enough (should be R8G8B8X8)
	if (CompareDDSPixelFormatMask(ddpf, DDS_DDPF_RGB            , 16, 0x00000F00, 0x000000F0, 0x0000000F, 0x00000000)) { return DDS_DXGI_FORMAT_B4G4R4A4_UNORM   ; } // close enough (should be B4G4R4X4)
	if (CompareDDSPixelFormatMask(ddpf, DDS_DDPF_RGB            , 16, 0x00007C00, 0x000003E0, 0x0000001F, 0x00000000)) { return DDS_DXGI_FORMAT_B5G5R5A1_UNORM   ; } // close enough (should be B5G5R5X1)
	if (CompareDDSPixelFormatMask(ddpf, DDS_DDPF_RGB            , 32, 0x3FF00000, 0x000FFC00, 0x000003FF, 0x00000000)) { return DDS_DXGI_FORMAT_R10G10B10A2_UNORM; } // close enough (should be R10G10B10X2)
	if (CompareDDSPixelFormatMask(ddpf, DDS_DDPF_RGB            , 32, 0x000003FF, 0x000FFC00, 0x3FF00000, 0x00000000)) { return DDS_DXGI_FORMAT_R10G10B10A2_UNORM; } // close enough (should be R10G10B10X2)

	return DDS_DXGI_FORMAT_UNKNOWN;
}

static DDS_DDPIXELFORMAT MakeDDSPixelFormat(uint32 flags, uint32 bits, uint32 rmask, uint32 gmask, uint32 bmask, uint32 amask, uint32 fourCC = 0)
{
	DDS_DDPIXELFORMAT ddpf;
	memset(&ddpf, 0, sizeof(ddpf));
	ddpf.dwSize = sizeof(ddpf);
	ddpf.dwFlags = flags;
	ddpf.dwRGBBitCount = bits;
	ddpf.dwRBitMask = rmask;
	ddpf.dwGBitMask = gmask;
	ddpf.dwBBitMask = bmask;
	ddpf.dwABitMask = amask;
	ddpf.dwFourCC = fourCC;
	return ddpf;
}

DDS_DDPIXELFORMAT GetDDSPixelFormatFromDX10Format(DDS_DXGI_FORMAT dxgiFormat, bool forceDX9Compatible, bool allowUnofficialDX9Formats)
{
	if (forceDX9Compatible) // normally we don't want to do this unless we absolutely have to load the DDS in an old viewer ..
	{
		switch ((int)dxgiFormat)
		{
		case DDS_DXGI_FORMAT_R8_UNORM  : return MakeDDSPixelFormat(DDS_DDPF_LUMINANCE      ,  8, 0x000000FF, 0x00000000, 0x00000000, 0x00000000); // L8
		case DDS_DXGI_FORMAT_R8G8_UNORM: return MakeDDSPixelFormat(DDS_DDPF_LUMINANCE_ALPHA, 16, 0x000000FF, 0x00000000, 0x00000000, 0x0000FF00); // A8L8
		case DDS_DXGI_FORMAT_R16_UNORM : return MakeDDSPixelFormat(DDS_DDPF_LUMINANCE      , 16, 0x0000FFFF, 0x00000000, 0x00000000, 0x00000000); // L16
		}
	}
	if (allowUnofficialDX9Formats)
	{
		switch ((int)dxgiFormat)
		{
		case DDS_DXGI_FORMAT_R8_UNORM  : return MakeDDSPixelFormat(DDS_DDPF_RGB ,  8, 0x000000FF, 0x00000000, 0x00000000, 0x00000000); // R8_UNORM
		case DDS_DXGI_FORMAT_R8G8_UNORM: return MakeDDSPixelFormat(DDS_DDPF_RGBA, 16, 0x000000FF, 0x0000FF00, 0x00000000, 0x00000000); // R8G8_UNORM
		case DDS_DXGI_FORMAT_R16_UNORM : return MakeDDSPixelFormat(DDS_DDPF_RGB , 16, 0x0000FFFF, 0x00000000, 0x00000000, 0x00000000); // R16_UNORM
		}
	}
	switch ((int)dxgiFormat)
	{
	case DDS_DXGI_FORMAT_B8G8R8A8_UNORM            : return MakeDDSPixelFormat(DDS_DDPF_RGBA , 32, 0x00FF0000, 0x0000FF00, 0x000000FF, 0xFF000000);
	case DDS_DXGI_FORMAT_R8G8B8A8_UNORM            : return MakeDDSPixelFormat(DDS_DDPF_RGBA , 32, 0x000000FF, 0x0000FF00, 0x00FF0000, 0xFF000000);
	case DDS_DXGI_FORMAT_A8_UNORM                  : return MakeDDSPixelFormat(DDS_DDPF_ALPHA,  8, 0x00000000, 0x00000000, 0x00000000, 0x000000FF);
	case DDS_DXGI_FORMAT_B4G4R4A4_UNORM            : return MakeDDSPixelFormat(DDS_DDPF_RGBA , 16, 0x00000F00, 0x000000F0, 0x0000000F, 0x0000F000);
	case DDS_DXGI_FORMAT_B5G5R5A1_UNORM            : return MakeDDSPixelFormat(DDS_DDPF_RGBA , 16, 0x00007C00, 0x000003E0, 0x0000001F, 0x00008000);
	case DDS_DXGI_FORMAT_B5G6R5_UNORM              : return MakeDDSPixelFormat(DDS_DDPF_RGB  , 16, 0x0000F800, 0x000007E0, 0x0000001F, 0x00000000);
	case DDS_DXGI_FORMAT_R10G10B10A2_UNORM         : return MakeDDSPixelFormat(DDS_DDPF_RGBA , 32, 0x000003FF, 0x000FFC00, 0x3FF00000, 0xC0000000);
	case DDS_DXGI_FORMAT_R16G16_UNORM              : return MakeDDSPixelFormat(DDS_DDPF_RGB  , 32, 0x0000FFFF, 0xFFFF0000, 0x00000000, 0x00000000);

	case DDS_DXGI_FORMAT_B8G8R8X8_UNORM            : return MakeDDSPixelFormat(DDS_DDPF_RGB  , 32, 0x00FF0000, 0x0000FF00, 0x000000FF, 0x00000000);

	case DDS_DXGI_FORMAT_R16G16B16A16_UNORM        : return MakeDDSPixelFormat(DDS_DDPF_FOURCC, 0, 0,0,0,0, DDS_D3DFMT_A16B16G16R16       );
	case DDS_DXGI_FORMAT_G8R8_G8B8_UNORM           : return MakeDDSPixelFormat(DDS_DDPF_FOURCC, 0, 0,0,0,0, DDS_D3DFMT_G8R8_G8B8          );
	case DDS_DXGI_FORMAT_R8G8_B8G8_UNORM           : return MakeDDSPixelFormat(DDS_DDPF_FOURCC, 0, 0,0,0,0, DDS_D3DFMT_R8G8_B8G8          );
	case DDS_DXGI_FORMAT_BC1_UNORM                 : return MakeDDSPixelFormat(DDS_DDPF_FOURCC, 0, 0,0,0,0, DDS_D3DFMT_DXT1               );
	case DDS_DXGI_FORMAT_BC2_UNORM                 : return MakeDDSPixelFormat(DDS_DDPF_FOURCC, 0, 0,0,0,0, DDS_D3DFMT_DXT3               );
	case DDS_DXGI_FORMAT_BC3_UNORM                 : return MakeDDSPixelFormat(DDS_DDPF_FOURCC, 0, 0,0,0,0, DDS_D3DFMT_DXT5               );
	case DDS_DXGI_FORMAT_R16_FLOAT                 : return MakeDDSPixelFormat(DDS_DDPF_FOURCC, 0, 0,0,0,0, DDS_D3DFMT_R16F               );
	case DDS_DXGI_FORMAT_R16G16_FLOAT              : return MakeDDSPixelFormat(DDS_DDPF_FOURCC, 0, 0,0,0,0, DDS_D3DFMT_G16R16F            );
	case DDS_DXGI_FORMAT_R16G16B16A16_FLOAT        : return MakeDDSPixelFormat(DDS_DDPF_FOURCC, 0, 0,0,0,0, DDS_D3DFMT_A16B16G16R16F      );
	case DDS_DXGI_FORMAT_R32_FLOAT                 : return MakeDDSPixelFormat(DDS_DDPF_FOURCC, 0, 0,0,0,0, DDS_D3DFMT_R32F               );
	case DDS_DXGI_FORMAT_R32G32_FLOAT              : return MakeDDSPixelFormat(DDS_DDPF_FOURCC, 0, 0,0,0,0, DDS_D3DFMT_G32R32F            );
	case DDS_DXGI_FORMAT_R32G32B32A32_FLOAT        : return MakeDDSPixelFormat(DDS_DDPF_FOURCC, 0, 0,0,0,0, DDS_D3DFMT_A32B32G32R32F      );
	case DDS_DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM: return MakeDDSPixelFormat(DDS_DDPF_FOURCC, 0, 0,0,0,0, DDS_D3DFMT_A2B10G10R10_XR_BIAS);
	// signed formats ..
	case DDS_DXGI_FORMAT_R8G8_SNORM                : return MakeDDSPixelFormat(DDS_DDPF_FOURCC, 0, 0,0,0,0, DDS_D3DFMT_V8U8               );
	case DDS_DXGI_FORMAT_R8G8B8A8_SNORM            : return MakeDDSPixelFormat(DDS_DDPF_FOURCC, 0, 0,0,0,0, DDS_D3DFMT_Q8W8V8U8           );
	case DDS_DXGI_FORMAT_R16G16_SNORM              : return MakeDDSPixelFormat(DDS_DDPF_FOURCC, 0, 0,0,0,0, DDS_D3DFMT_V16U16             );
	case DDS_DXGI_FORMAT_R16G16B16A16_SNORM        : return MakeDDSPixelFormat(DDS_DDPF_FOURCC, 0, 0,0,0,0, DDS_D3DFMT_Q16W16V16U16       );
	}

	DDS_DDPIXELFORMAT ddpf;
	memset(&ddpf, 0, sizeof(ddpf));
	return ddpf;
}

DDS_DXGI_FORMAT GeTypelessFormat(DDS_DXGI_FORMAT format)
{
	switch (format)
	{
	case DDS_DXGI_FORMAT_R32G32B32A32_TYPELESS      : return DDS_DXGI_FORMAT_R32G32B32A32_TYPELESS;
	case DDS_DXGI_FORMAT_R32G32B32A32_FLOAT         : return DDS_DXGI_FORMAT_R32G32B32A32_TYPELESS;
	case DDS_DXGI_FORMAT_R32G32B32A32_UINT          : return DDS_DXGI_FORMAT_R32G32B32A32_TYPELESS;
	case DDS_DXGI_FORMAT_R32G32B32A32_SINT          : return DDS_DXGI_FORMAT_R32G32B32A32_TYPELESS;
	case DDS_DXGI_FORMAT_R32G32B32_TYPELESS         : return DDS_DXGI_FORMAT_R32G32B32_TYPELESS;
	case DDS_DXGI_FORMAT_R32G32B32_FLOAT            : return DDS_DXGI_FORMAT_R32G32B32_TYPELESS;
	case DDS_DXGI_FORMAT_R32G32B32_UINT             : return DDS_DXGI_FORMAT_R32G32B32_TYPELESS;
	case DDS_DXGI_FORMAT_R32G32B32_SINT             : return DDS_DXGI_FORMAT_R32G32B32_TYPELESS;
	case DDS_DXGI_FORMAT_R16G16B16A16_TYPELESS      : return DDS_DXGI_FORMAT_R16G16B16A16_TYPELESS;
	case DDS_DXGI_FORMAT_R16G16B16A16_FLOAT         : return DDS_DXGI_FORMAT_R16G16B16A16_TYPELESS;
	case DDS_DXGI_FORMAT_R16G16B16A16_UNORM         : return DDS_DXGI_FORMAT_R16G16B16A16_TYPELESS;
	case DDS_DXGI_FORMAT_R16G16B16A16_UINT          : return DDS_DXGI_FORMAT_R16G16B16A16_TYPELESS;
	case DDS_DXGI_FORMAT_R16G16B16A16_SNORM         : return DDS_DXGI_FORMAT_R16G16B16A16_TYPELESS;
	case DDS_DXGI_FORMAT_R16G16B16A16_SINT          : return DDS_DXGI_FORMAT_R16G16B16A16_TYPELESS;
	case DDS_DXGI_FORMAT_R32G32_TYPELESS            : return DDS_DXGI_FORMAT_R32G32_TYPELESS;
	case DDS_DXGI_FORMAT_R32G32_FLOAT               : return DDS_DXGI_FORMAT_R32G32_TYPELESS;
	case DDS_DXGI_FORMAT_R32G32_UINT                : return DDS_DXGI_FORMAT_R32G32_TYPELESS;
	case DDS_DXGI_FORMAT_R32G32_SINT                : return DDS_DXGI_FORMAT_R32G32_TYPELESS;
	case DDS_DXGI_FORMAT_R32G8X24_TYPELESS          : return DDS_DXGI_FORMAT_R32G8X24_TYPELESS;
	case DDS_DXGI_FORMAT_D32_FLOAT_S8X24_UINT       : return DDS_DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS;
	case DDS_DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS   : return DDS_DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS;
	case DDS_DXGI_FORMAT_X32_TYPELESS_G8X24_UINT    : return DDS_DXGI_FORMAT_X32_TYPELESS_G8X24_UINT;
	case DDS_DXGI_FORMAT_R10G10B10A2_TYPELESS       : return DDS_DXGI_FORMAT_R10G10B10A2_TYPELESS;
	case DDS_DXGI_FORMAT_R10G10B10A2_UNORM          : return DDS_DXGI_FORMAT_R10G10B10A2_TYPELESS;
	case DDS_DXGI_FORMAT_R10G10B10A2_UINT           : return DDS_DXGI_FORMAT_R10G10B10A2_TYPELESS;
	case DDS_DXGI_FORMAT_R11G11B10_FLOAT            : return DDS_DXGI_FORMAT_R11G11B10_FLOAT; // <-- no typeless format!
	case DDS_DXGI_FORMAT_R8G8B8A8_TYPELESS          : return DDS_DXGI_FORMAT_R8G8B8A8_TYPELESS;
	case DDS_DXGI_FORMAT_R8G8B8A8_UNORM             : return DDS_DXGI_FORMAT_R8G8B8A8_TYPELESS;
	case DDS_DXGI_FORMAT_R8G8B8A8_UNORM_SRGB        : return DDS_DXGI_FORMAT_R8G8B8A8_TYPELESS;
	case DDS_DXGI_FORMAT_R8G8B8A8_UINT              : return DDS_DXGI_FORMAT_R8G8B8A8_TYPELESS;
	case DDS_DXGI_FORMAT_R8G8B8A8_SNORM             : return DDS_DXGI_FORMAT_R8G8B8A8_TYPELESS;
	case DDS_DXGI_FORMAT_R8G8B8A8_SINT              : return DDS_DXGI_FORMAT_R8G8B8A8_TYPELESS;
	case DDS_DXGI_FORMAT_R16G16_TYPELESS            : return DDS_DXGI_FORMAT_R16G16_TYPELESS;
	case DDS_DXGI_FORMAT_R16G16_FLOAT               : return DDS_DXGI_FORMAT_R16G16_TYPELESS;
	case DDS_DXGI_FORMAT_R16G16_UNORM               : return DDS_DXGI_FORMAT_R16G16_TYPELESS;
	case DDS_DXGI_FORMAT_R16G16_UINT                : return DDS_DXGI_FORMAT_R16G16_TYPELESS;
	case DDS_DXGI_FORMAT_R16G16_SNORM               : return DDS_DXGI_FORMAT_R16G16_TYPELESS;
	case DDS_DXGI_FORMAT_R16G16_SINT                : return DDS_DXGI_FORMAT_R16G16_TYPELESS;
	case DDS_DXGI_FORMAT_R32_TYPELESS               : return DDS_DXGI_FORMAT_R32_TYPELESS;
	case DDS_DXGI_FORMAT_D32_FLOAT                  : return DDS_DXGI_FORMAT_R32_TYPELESS;
	case DDS_DXGI_FORMAT_R32_FLOAT                  : return DDS_DXGI_FORMAT_R32_TYPELESS;
	case DDS_DXGI_FORMAT_R32_UINT                   : return DDS_DXGI_FORMAT_R32_TYPELESS;
	case DDS_DXGI_FORMAT_R32_SINT                   : return DDS_DXGI_FORMAT_R32_TYPELESS;
	case DDS_DXGI_FORMAT_R24G8_TYPELESS             : return DDS_DXGI_FORMAT_R24G8_TYPELESS;
	case DDS_DXGI_FORMAT_D24_UNORM_S8_UINT          : return DDS_DXGI_FORMAT_R24_UNORM_X8_TYPELESS;
	case DDS_DXGI_FORMAT_R24_UNORM_X8_TYPELESS      : return DDS_DXGI_FORMAT_R24_UNORM_X8_TYPELESS;
	case DDS_DXGI_FORMAT_X24_TYPELESS_G8_UINT       : return DDS_DXGI_FORMAT_X24_TYPELESS_G8_UINT;
	case DDS_DXGI_FORMAT_R8G8_TYPELESS              : return DDS_DXGI_FORMAT_R8G8_TYPELESS;
	case DDS_DXGI_FORMAT_R8G8_UNORM                 : return DDS_DXGI_FORMAT_R8G8_TYPELESS;
	case DDS_DXGI_FORMAT_R8G8_UINT                  : return DDS_DXGI_FORMAT_R8G8_TYPELESS;
	case DDS_DXGI_FORMAT_R8G8_SNORM                 : return DDS_DXGI_FORMAT_R8G8_TYPELESS;
	case DDS_DXGI_FORMAT_R8G8_SINT                  : return DDS_DXGI_FORMAT_R8G8_TYPELESS;
	case DDS_DXGI_FORMAT_R16_TYPELESS               : return DDS_DXGI_FORMAT_R16_TYPELESS;
	case DDS_DXGI_FORMAT_R16_FLOAT                  : return DDS_DXGI_FORMAT_R16_TYPELESS;
	case DDS_DXGI_FORMAT_D16_UNORM                  : return DDS_DXGI_FORMAT_R16_TYPELESS;
	case DDS_DXGI_FORMAT_R16_UNORM                  : return DDS_DXGI_FORMAT_R16_TYPELESS;
	case DDS_DXGI_FORMAT_R16_UINT                   : return DDS_DXGI_FORMAT_R16_TYPELESS;
	case DDS_DXGI_FORMAT_R16_SNORM                  : return DDS_DXGI_FORMAT_R16_TYPELESS;
	case DDS_DXGI_FORMAT_R16_SINT                   : return DDS_DXGI_FORMAT_R16_TYPELESS;
	case DDS_DXGI_FORMAT_R8_TYPELESS                : return DDS_DXGI_FORMAT_R8_TYPELESS;
	case DDS_DXGI_FORMAT_R8_UNORM                   : return DDS_DXGI_FORMAT_R8_TYPELESS;
	case DDS_DXGI_FORMAT_R8_UINT                    : return DDS_DXGI_FORMAT_R8_TYPELESS;
	case DDS_DXGI_FORMAT_R8_SNORM                   : return DDS_DXGI_FORMAT_R8_TYPELESS;
	case DDS_DXGI_FORMAT_R8_SINT                    : return DDS_DXGI_FORMAT_R8_TYPELESS;
	case DDS_DXGI_FORMAT_A8_UNORM                   : return DDS_DXGI_FORMAT_R8_TYPELESS;
	case DDS_DXGI_FORMAT_R1_UNORM                   : return DDS_DXGI_FORMAT_R1_UNORM; // <-- no typeless format!
	case DDS_DXGI_FORMAT_R9G9B9E5_SHAREDEXP         : return DDS_DXGI_FORMAT_R9G9B9E5_SHAREDEXP; // <-- no typeless format!
	case DDS_DXGI_FORMAT_R8G8_B8G8_UNORM            : return DDS_DXGI_FORMAT_R8G8_B8G8_UNORM; // <-- no typeless format!
	case DDS_DXGI_FORMAT_G8R8_G8B8_UNORM            : return DDS_DXGI_FORMAT_G8R8_G8B8_UNORM; // <-- no typeless format!
	case DDS_DXGI_FORMAT_BC1_TYPELESS               : return DDS_DXGI_FORMAT_BC1_TYPELESS;
	case DDS_DXGI_FORMAT_BC1_UNORM                  : return DDS_DXGI_FORMAT_BC1_TYPELESS;
	case DDS_DXGI_FORMAT_BC1_UNORM_SRGB             : return DDS_DXGI_FORMAT_BC1_TYPELESS;
	case DDS_DXGI_FORMAT_BC2_TYPELESS               : return DDS_DXGI_FORMAT_BC2_TYPELESS;
	case DDS_DXGI_FORMAT_BC2_UNORM                  : return DDS_DXGI_FORMAT_BC2_TYPELESS;
	case DDS_DXGI_FORMAT_BC2_UNORM_SRGB             : return DDS_DXGI_FORMAT_BC2_TYPELESS;
	case DDS_DXGI_FORMAT_BC3_TYPELESS               : return DDS_DXGI_FORMAT_BC3_TYPELESS;
	case DDS_DXGI_FORMAT_BC3_UNORM                  : return DDS_DXGI_FORMAT_BC3_TYPELESS;
	case DDS_DXGI_FORMAT_BC3_UNORM_SRGB             : return DDS_DXGI_FORMAT_BC3_TYPELESS;
	case DDS_DXGI_FORMAT_BC4_TYPELESS               : return DDS_DXGI_FORMAT_BC4_TYPELESS;
	case DDS_DXGI_FORMAT_BC4_UNORM                  : return DDS_DXGI_FORMAT_BC4_TYPELESS;
	case DDS_DXGI_FORMAT_BC4_SNORM                  : return DDS_DXGI_FORMAT_BC4_TYPELESS;
	case DDS_DXGI_FORMAT_BC5_TYPELESS               : return DDS_DXGI_FORMAT_BC5_TYPELESS;
	case DDS_DXGI_FORMAT_BC5_UNORM                  : return DDS_DXGI_FORMAT_BC5_TYPELESS;
	case DDS_DXGI_FORMAT_BC5_SNORM                  : return DDS_DXGI_FORMAT_BC5_TYPELESS;
	case DDS_DXGI_FORMAT_B5G6R5_UNORM               : return DDS_DXGI_FORMAT_B5G6R5_UNORM; // <-- no typeless format!
	case DDS_DXGI_FORMAT_B5G5R5A1_UNORM             : return DDS_DXGI_FORMAT_B5G5R5A1_UNORM; // <-- no typeless format!
	case DDS_DXGI_FORMAT_B8G8R8A8_UNORM             : return DDS_DXGI_FORMAT_B8G8R8A8_TYPELESS;
	case DDS_DXGI_FORMAT_B8G8R8X8_UNORM             : return DDS_DXGI_FORMAT_B8G8R8A8_TYPELESS;
	case DDS_DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM : return DDS_DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM; // <-- no typeless format!
	case DDS_DXGI_FORMAT_B8G8R8A8_TYPELESS          : return DDS_DXGI_FORMAT_B8G8R8A8_TYPELESS;
	case DDS_DXGI_FORMAT_B8G8R8A8_UNORM_SRGB        : return DDS_DXGI_FORMAT_B8G8R8A8_TYPELESS;
	case DDS_DXGI_FORMAT_B8G8R8X8_TYPELESS          : return DDS_DXGI_FORMAT_B8G8R8A8_TYPELESS;
	case DDS_DXGI_FORMAT_B8G8R8X8_UNORM_SRGB        : return DDS_DXGI_FORMAT_B8G8R8A8_TYPELESS;
	case DDS_DXGI_FORMAT_BC6H_TYPELESS              : return DDS_DXGI_FORMAT_BC6H_TYPELESS;
	case DDS_DXGI_FORMAT_BC6H_UF16                  : return DDS_DXGI_FORMAT_BC6H_TYPELESS;
	case DDS_DXGI_FORMAT_BC6H_SF16                  : return DDS_DXGI_FORMAT_BC6H_TYPELESS;
	case DDS_DXGI_FORMAT_BC7_TYPELESS               : return DDS_DXGI_FORMAT_BC7_TYPELESS;
	case DDS_DXGI_FORMAT_BC7_UNORM                  : return DDS_DXGI_FORMAT_BC7_TYPELESS;
	case DDS_DXGI_FORMAT_BC7_UNORM_SRGB             : return DDS_DXGI_FORMAT_BC7_TYPELESS;
	case DDS_DXGI_FORMAT_AYUV                       : return DDS_DXGI_FORMAT_AYUV; // <-- no typeless format!
	case DDS_DXGI_FORMAT_Y410                       : return DDS_DXGI_FORMAT_Y410; // <-- no typeless format!
	case DDS_DXGI_FORMAT_Y416                       : return DDS_DXGI_FORMAT_Y416; // <-- no typeless format!
	case DDS_DXGI_FORMAT_NV12                       : return DDS_DXGI_FORMAT_NV12; // <-- no typeless format!
	case DDS_DXGI_FORMAT_P010                       : return DDS_DXGI_FORMAT_P010; // <-- no typeless format!
	case DDS_DXGI_FORMAT_P016                       : return DDS_DXGI_FORMAT_P016; // <-- no typeless format!
	case DDS_DXGI_FORMAT_420_OPAQUE                 : return DDS_DXGI_FORMAT_420_OPAQUE; // <-- no typeless format!
	case DDS_DXGI_FORMAT_YUY2                       : return DDS_DXGI_FORMAT_YUY2; // <-- no typeless format!
	case DDS_DXGI_FORMAT_Y210                       : return DDS_DXGI_FORMAT_Y210; // <-- no typeless format!
	case DDS_DXGI_FORMAT_Y216                       : return DDS_DXGI_FORMAT_Y216; // <-- no typeless format!
	case DDS_DXGI_FORMAT_NV11                       : return DDS_DXGI_FORMAT_NV11; // <-- no typeless format!
	case DDS_DXGI_FORMAT_AI44                       : return DDS_DXGI_FORMAT_AI44; // <-- no typeless format!
	case DDS_DXGI_FORMAT_IA44                       : return DDS_DXGI_FORMAT_IA44; // <-- no typeless format!
	case DDS_DXGI_FORMAT_P8                         : return DDS_DXGI_FORMAT_P8; // <-- no typeless format!
	case DDS_DXGI_FORMAT_A8P8                       : return DDS_DXGI_FORMAT_A8P8; // <-- no typeless format!
	case DDS_DXGI_FORMAT_B4G4R4A4_UNORM             : return DDS_DXGI_FORMAT_B4G4R4A4_UNORM; // <-- no typeless format!
	case DDS_DXGI_FORMAT_R10G10B10_7E3_A2_FLOAT     : return DDS_DXGI_FORMAT_R10G10B10_7E3_A2_FLOAT; // <-- no typeless format!
	case DDS_DXGI_FORMAT_R10G10B10_6E4_A2_FLOAT     : return DDS_DXGI_FORMAT_R10G10B10_6E4_A2_FLOAT; // <-- no typeless format!
	default                                         : return DDS_DXGI_FORMAT_UNKNOWN;
	}
}

bool GetDDSInfo(const char* path, int& w, int& h, int* depth, int* mips, DDS_DXGI_FORMAT* dxgiFormat, DDS_IMAGE_TYPE* imageType, int* layerCount, int* offsetToPixelData)
{
	FILE* dds = fopen(path, "rb");

	if (dds)
	{
		uint32 magic = 0;
		fread(&magic, sizeof(magic), 1, dds);
		if (magic != DDS_MAKE_MAGIC_NUMBER('D','D','S',' '))
		{
			printf("ERROR: dds verification failed for %s, magic = 0x%08x (expected 0x%08x)\n", path, magic, DDS_MAKE_MAGIC_NUMBER('D','D','S',' '));
			fclose(dds);
			return false;
		}

		DDS_DDSURFACEDESC2 header;
		fread(&header, sizeof(header), 1, dds);
		if (header.dwSize != sizeof(header))
		{
			printf("ERROR: dds verification failed for %s, header size = %d (expected %zd)\n", path, header.dwSize, sizeof(header));
			fclose(dds);
			return false;
		}
		else if (header.dwMipMapCount > 1)
		{
			const int maxMips = GetMaxMipCount((int)header.dwWidth, (int)header.dwHeight, Max(1, (int)header.dwDepth));

			if ((int)header.dwMipMapCount > maxMips)
			{
				printf("ERROR: dds verification failed for %s, too many mips (w=%d,h=%d,d=%d,mips=%d), max for this size is %d\n", path, header.dwWidth, header.dwHeight, header.dwDepth, header.dwMipMapCount, maxMips);
				fclose(dds);
				return false;
			}
		}

		DDS_IMAGE_TYPE type = DDS_IMAGE_TYPE_UNKNOWN;

		if (header.ddsCaps.dwCaps2 & DDS_DDSCAPS2_CUBEMAP)
		{
			if ((header.ddsCaps.dwCaps2 & DDS_DDSCAPS2_CUBEMAP_ALLFACES) != DDS_DDSCAPS2_CUBEMAP_ALLFACES)
			{
				printf("ERROR: dds verification failed for %s, cubemap missing faces (0x%08x, expected 0x%08x)\n", path, header.ddsCaps.dwCaps2 & DDS_DDSCAPS2_CUBEMAP_ALLFACES, DDS_DDSCAPS2_CUBEMAP_ALLFACES);
				fclose(dds);
				return false;
			}

			if (header.ddsCaps.dwCaps2 & DDS_DDSCAPS2_VOLUME)
			{
				printf("ERROR: dds verification failed for %s, both cubemap and volume flags set\n", path);
				fclose(dds);
				return false;
			}

			type = DDS_IMAGE_TYPE_CUBE;
		}
		else if (header.ddsCaps.dwCaps2 & DDS_DDSCAPS2_VOLUME)
		{
			if (header.ddsCaps.dwCaps2 & DDS_DDSCAPS2_CUBEMAP_ALLFACES)
			{
				printf("ERROR: dds verification failed for %s, volume has cubemap faces (0x%08x)\n", path, header.ddsCaps.dwCaps2 & DDS_DDSCAPS2_CUBEMAP_ALLFACES);
				fclose(dds);
				return false;
			}

			type = DDS_IMAGE_TYPE_3D;
		}
		else
		{
			type = DDS_IMAGE_TYPE_2D;
		}

		DDS_DXGI_FORMAT format = DDS_DXGI_FORMAT_UNKNOWN;

		if (header.ddpfPixelFormat.dwFourCC == DDS_MAKE_MAGIC_NUMBER('D','X','1','0'))
		{
			DDS_HEADER_DXT10 dx10header;
			fread(&dx10header, sizeof(dx10header), 1, dds);

			if (type == DDS_IMAGE_TYPE_2D && dx10header.resourceDimension != DDS_DIMENSION_TEXTURE2D)
			{
				if (dx10header.resourceDimension == DDS_DIMENSION_TEXTURE1D && header.dwHeight == 1)
				{
					// ok i guess .. 1D texture
				}
				else
				{
					printf("ERROR: dds verification failed for %s, 2D image has resourceDimension=%d\n", path, dx10header.resourceDimension);
					fclose(dds);
					return false;
				}
			}
			else if (type == DDS_IMAGE_TYPE_3D && dx10header.resourceDimension != DDS_DIMENSION_TEXTURE3D)
			{
				printf("ERROR: dds verification failed for %s, volume image has resourceDimension=%d\n", path, dx10header.resourceDimension);
				fclose(dds);
				return false;
			}
			else if (type == DDS_IMAGE_TYPE_CUBE && dx10header.resourceDimension != DDS_DIMENSION_TEXTURE2D)
			{
				printf("ERROR: dds verification failed for %s, cubemap image has resourceDimension=%d\n", path, dx10header.resourceDimension);
				fclose(dds);
				return false;
			}

			const bool hasCubemapFlag = ((dx10header.miscFlag & DDS_RESOURCE_MISC_TEXTURECUBE) != 0);

			if (hasCubemapFlag != (type == DDS_IMAGE_TYPE_CUBE))
			{
				printf("ERROR: dds verification failed for %s, dx10 cubemap flag %s\n", path, hasCubemapFlag ? "set" : "not set");
				fclose(dds);
				return false;
			}
			else if (type == DDS_IMAGE_TYPE_3D && dx10header.arraySize > 1)
			{
				printf("ERROR: dds verification failed for %s, volume texture arrays not supported\n", path);
				fclose(dds);
				return false;
			}

			format = (DDS_DXGI_FORMAT)dx10header.dxgiFormat;

			if (dxgiFormat) { *dxgiFormat = format; }
			if (layerCount) { *layerCount = dx10header.arraySize; }
		}
		else
		{
			format = GetDX10FormatFromDDSPixelFormat(header.ddpfPixelFormat);

			if (dxgiFormat) { *dxgiFormat = format; }
			if (layerCount) { *layerCount = 1; }
		}

		if (format == DDS_DXGI_FORMAT_UNKNOWN ||
			format >= DDS_DXGI_FORMAT_LAST)
		{
			printf("ERROR: dds verification failed for %s, format is unknown\n", path);
			fclose(dds);
			return false;
		}

		w = (int)header.dwWidth;
		h = (int)header.dwHeight;

		if (depth) { *depth = (int)header.dwDepth; }
		if (mips) { *mips = Max(1, (int)header.dwMipMapCount); }
		if (imageType) { *imageType = type; }
		if (offsetToPixelData) { *offsetToPixelData = (int)ftell(dds); }

		fclose(dds);
		return true;
	}

	return false;
}

// bSaveDX10 - forces DX10 format (dxgiFormat will be derived from ddpf). otherwise will save as DX9 if ddpf is given or if ddpf can be derived from dxgiFormat.
// bForceRespectSaveDX10 - always save DX10 if bSaveDX10 is true, otherwise save DX9, do not determine DX9/10 based on the image properties
bool WriteDDSHeader(FILE* dds, DDS_IMAGE_TYPE type, int w, int h, int d, int mips, int layers, const DDS_DDPIXELFORMAT& ddpf, DDS_DXGI_FORMAT dxgiFormat, bool bSaveDX10, bool bForceRespectSaveDX10)
{
	DDS_DDSURFACEDESC2 header;
	memset(&header, 0, sizeof(header));

	header.dwSize = sizeof(header);
	header.dwFlags = DDS_DDSD_CAPS | DDS_DDSD_WIDTH | DDS_DDSD_HEIGHT | DDS_DDSD_PIXELFORMAT;
	header.dwWidth = w;
	header.dwHeight = h;
	header.ddsCaps.dwCaps1 = DDS_DDSCAPS_TEXTURE;

	if (mips > 1)
	{
		header.dwFlags |= DDS_DDSD_MIPMAPCOUNT;
		header.ddsCaps.dwCaps1 |= DDS_DDSCAPS_COMPLEX | DDS_DDSCAPS_MIPMAP;
		header.dwMipMapCount = mips;
	}

	if (type == DDS_IMAGE_TYPE_3D)
	{
		header.dwFlags |= DDS_DDSD_DEPTH;
		header.ddsCaps.dwCaps2 |= DDS_DDSCAPS2_VOLUME;
		header.dwDepth = d;
	}
	else if (type == DDS_IMAGE_TYPE_CUBE)
	{
		assert(w == h);
		header.ddsCaps.dwCaps1 |= DDS_DDSCAPS_COMPLEX;
		header.ddsCaps.dwCaps2 |= DDS_DDSCAPS2_CUBEMAP | DDS_DDSCAPS2_CUBEMAP_ALLFACES;
	}

	if (layers > 1 || bSaveDX10)
	{
		if (!bSaveDX10 && bForceRespectSaveDX10)
		{
			return false;
		}

		header.ddpfPixelFormat.dwSize = sizeof(header.ddpfPixelFormat);
		header.ddpfPixelFormat.dwFlags = DDS_DDPF_FOURCC;
		header.ddpfPixelFormat.dwFourCC = DDS_MAKE_MAGIC_NUMBER('D','X','1','0');

		if (dxgiFormat == DDS_DXGI_FORMAT_UNKNOWN && ddpf.dwSize != 0) // derive dx10 format from dx9 format
		{
			dxgiFormat = GetDX10FormatFromDDSPixelFormat(ddpf);
		}
	}
	else if (ddpf.dwSize != 0) // use dx9 format
	{
		assert(ddpf.dwSize == sizeof(header.ddpfPixelFormat));
		header.ddpfPixelFormat = ddpf;
	}
	else // try to derive dx9 format from dx10 format ..
	{
		if (dxgiFormat == DDS_DXGI_FORMAT_UNKNOWN)
		{
			return false;
		}

		header.ddpfPixelFormat = GetDDSPixelFormatFromDX10Format(dxgiFormat, false, false);

		if (header.ddpfPixelFormat.dwSize == 0)
		{
			if (bForceRespectSaveDX10)
			{
				return false;
			}

			// couldn't derive dx9 format from dx10 format .. so use the dx10 format
			header.ddpfPixelFormat.dwSize = sizeof(header.ddpfPixelFormat);
			header.ddpfPixelFormat.dwFlags = DDS_DDPF_FOURCC;
			header.ddpfPixelFormat.dwFourCC = DDS_MAKE_MAGIC_NUMBER('D','X','1','0');
		}
	}

	if (dds)
	{
		const int bs = GetDX10FormatBlockSize(dxgiFormat);

		if (bs > 1)
		{
			header.dwFlags |= DDS_DDSD_PITCH;
			header.dwPitchOrLinearSize = (Max(1, (w + bs - 1)/bs)*GetDX10FormatBitsPerPixel(dxgiFormat)*bs*bs)/8;
		}

		const uint32 magic = DDS_MAKE_MAGIC_NUMBER('D','D','S',' ');
		fwrite(&magic, sizeof(magic), 1, dds);
		fwrite(&header, sizeof(header), 1, dds);

		if (header.ddpfPixelFormat.dwFourCC == DDS_MAKE_MAGIC_NUMBER('D','X','1','0'))
		{
			DDS_HEADER_DXT10 dx10header;
			memset(&dx10header, 0, sizeof(dx10header));
			assert(dxgiFormat != DDS_DXGI_FORMAT_UNKNOWN);
			dx10header.dxgiFormat = dxgiFormat;
			dx10header.resourceDimension = (type == DDS_IMAGE_TYPE_3D) ? DDS_DIMENSION_TEXTURE3D : DDS_DIMENSION_TEXTURE2D;
			dx10header.miscFlag = (type == DDS_IMAGE_TYPE_CUBE) ? DDS_RESOURCE_MISC_TEXTURECUBE : 0;
			dx10header.arraySize = layers;
			fwrite(&dx10header, sizeof(dx10header), 1, dds);
		}
	}

	return true;
}

int GetDX10FormatBlockSize(DDS_DXGI_FORMAT format)
{
	if ((format >= DDS_DXGI_FORMAT_BC1_TYPELESS && format <= DDS_DXGI_FORMAT_BC5_SNORM) || // DXT1, DXT3, DXT5, DXT5A, DXN
		(format >= DDS_DXGI_FORMAT_BC6H_TYPELESS && format <= DDS_DXGI_FORMAT_BC7_UNORM_SRGB)) // BC6H or BC7
	{
		return 4;
	}
	else
	{
		return 1; // TODO -- this doesn't handle DDS_DXGI_FORMAT_R8G8_B8G8_UNORM etc.
	}
}

int GetDX10FormatBitsPerPixel(DDS_DXGI_FORMAT format)
{
	switch (format)
	{
	case DDS_DXGI_FORMAT_R32G32B32A32_TYPELESS:
	case DDS_DXGI_FORMAT_R32G32B32A32_FLOAT:
	case DDS_DXGI_FORMAT_R32G32B32A32_UINT:
	case DDS_DXGI_FORMAT_R32G32B32A32_SINT:
		return 128;

	case DDS_DXGI_FORMAT_R32G32B32_TYPELESS:
	case DDS_DXGI_FORMAT_R32G32B32_FLOAT:
	case DDS_DXGI_FORMAT_R32G32B32_UINT:
	case DDS_DXGI_FORMAT_R32G32B32_SINT:
		return 96;

	case DDS_DXGI_FORMAT_R16G16B16A16_TYPELESS:
	case DDS_DXGI_FORMAT_R16G16B16A16_FLOAT:
	case DDS_DXGI_FORMAT_R16G16B16A16_UNORM:
	case DDS_DXGI_FORMAT_R16G16B16A16_UINT:
	case DDS_DXGI_FORMAT_R16G16B16A16_SNORM:
	case DDS_DXGI_FORMAT_R16G16B16A16_SINT:
	case DDS_DXGI_FORMAT_R32G32_TYPELESS:
	case DDS_DXGI_FORMAT_R32G32_FLOAT:
	case DDS_DXGI_FORMAT_R32G32_UINT:
	case DDS_DXGI_FORMAT_R32G32_SINT:
		return 64;

	case DDS_DXGI_FORMAT_D32_FLOAT_S8X24_UINT:
	case DDS_DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS:
	case DDS_DXGI_FORMAT_X32_TYPELESS_G8X24_UINT:
	case DDS_DXGI_FORMAT_R32G8X24_TYPELESS:
		// According to AMD - Not sure if its the same for NVida but I hope so.
		return 40;

	case DDS_DXGI_FORMAT_R10G10B10A2_TYPELESS:
	case DDS_DXGI_FORMAT_R10G10B10A2_UNORM:
	case DDS_DXGI_FORMAT_R10G10B10A2_UINT:
	case DDS_DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM:
	case DDS_DXGI_FORMAT_R11G11B10_FLOAT:
	case DDS_DXGI_FORMAT_R8G8B8A8_TYPELESS:
	case DDS_DXGI_FORMAT_R8G8B8A8_UNORM:
	case DDS_DXGI_FORMAT_R8G8B8A8_UNORM_SRGB:
	case DDS_DXGI_FORMAT_R8G8B8A8_UINT:
	case DDS_DXGI_FORMAT_R8G8B8A8_SNORM:
	case DDS_DXGI_FORMAT_R8G8B8A8_SINT:
	case DDS_DXGI_FORMAT_R16G16_TYPELESS:
	case DDS_DXGI_FORMAT_R16G16_FLOAT:
	case DDS_DXGI_FORMAT_R16G16_UNORM:
	case DDS_DXGI_FORMAT_R16G16_UINT:
	case DDS_DXGI_FORMAT_R16G16_SNORM:
	case DDS_DXGI_FORMAT_R16G16_SINT:
	case DDS_DXGI_FORMAT_R32_TYPELESS:
	case DDS_DXGI_FORMAT_D32_FLOAT:
	case DDS_DXGI_FORMAT_R32_FLOAT:
	case DDS_DXGI_FORMAT_R32_UINT:
	case DDS_DXGI_FORMAT_R32_SINT:
	case DDS_DXGI_FORMAT_R24G8_TYPELESS:
	case DDS_DXGI_FORMAT_D24_UNORM_S8_UINT:
	case DDS_DXGI_FORMAT_R24_UNORM_X8_TYPELESS:
	case DDS_DXGI_FORMAT_X24_TYPELESS_G8_UINT:
	case DDS_DXGI_FORMAT_R9G9B9E5_SHAREDEXP:
	case DDS_DXGI_FORMAT_B8G8R8A8_UNORM:
	case DDS_DXGI_FORMAT_B8G8R8A8_UNORM_SRGB:
	case DDS_DXGI_FORMAT_B8G8R8X8_UNORM:
	case DDS_DXGI_FORMAT_B8G8R8X8_UNORM_SRGB:
		return 32;

	case DDS_DXGI_FORMAT_R8G8_TYPELESS:
	case DDS_DXGI_FORMAT_R8G8_UNORM:
	case DDS_DXGI_FORMAT_R8G8_UINT:
	case DDS_DXGI_FORMAT_R8G8_SNORM:
	case DDS_DXGI_FORMAT_R8G8_SINT:
	case DDS_DXGI_FORMAT_R16_TYPELESS:
	case DDS_DXGI_FORMAT_R16_FLOAT:
	case DDS_DXGI_FORMAT_D16_UNORM:
	case DDS_DXGI_FORMAT_R16_UNORM:
	case DDS_DXGI_FORMAT_R16_UINT:
	case DDS_DXGI_FORMAT_R16_SNORM:
	case DDS_DXGI_FORMAT_R16_SINT:
	case DDS_DXGI_FORMAT_B5G6R5_UNORM:
	case DDS_DXGI_FORMAT_B5G5R5A1_UNORM:
	case DDS_DXGI_FORMAT_R8G8_B8G8_UNORM: // 32 bits for 2 pixels
	case DDS_DXGI_FORMAT_G8R8_G8B8_UNORM: // 32 bits for 2 pixels
		return 16;

	case DDS_DXGI_FORMAT_R8_TYPELESS:
	case DDS_DXGI_FORMAT_R8_UNORM:
	case DDS_DXGI_FORMAT_R8_UINT:
	case DDS_DXGI_FORMAT_R8_SNORM:
	case DDS_DXGI_FORMAT_R8_SINT:
	case DDS_DXGI_FORMAT_A8_UNORM:
	case DDS_DXGI_FORMAT_BC2_TYPELESS:
	case DDS_DXGI_FORMAT_BC2_UNORM:
	case DDS_DXGI_FORMAT_BC2_UNORM_SRGB:
	case DDS_DXGI_FORMAT_BC3_TYPELESS:
	case DDS_DXGI_FORMAT_BC3_UNORM:
	case DDS_DXGI_FORMAT_BC3_UNORM_SRGB:
	case DDS_DXGI_FORMAT_BC5_TYPELESS:
	case DDS_DXGI_FORMAT_BC5_UNORM:
	case DDS_DXGI_FORMAT_BC5_SNORM:
	case DDS_DXGI_FORMAT_BC6H_TYPELESS:
	case DDS_DXGI_FORMAT_BC6H_UF16:
	case DDS_DXGI_FORMAT_BC6H_SF16:
	case DDS_DXGI_FORMAT_BC7_TYPELESS:
	case DDS_DXGI_FORMAT_BC7_UNORM:
	case DDS_DXGI_FORMAT_BC7_UNORM_SRGB:
		return 8;

	case DDS_DXGI_FORMAT_BC1_TYPELESS:
	case DDS_DXGI_FORMAT_BC1_UNORM:
	case DDS_DXGI_FORMAT_BC1_UNORM_SRGB:
	case DDS_DXGI_FORMAT_BC4_TYPELESS:
	case DDS_DXGI_FORMAT_BC4_UNORM:
	case DDS_DXGI_FORMAT_BC4_SNORM:
		return 4;

	case DDS_DXGI_FORMAT_R1_UNORM:
		return 1;

	case DDS_DXGI_FORMAT_P8:
		return 8;

	case DDS_DXGI_FORMAT_A8P8:
	case DDS_DXGI_FORMAT_B4G4R4A4_UNORM:
		return 16;

	case DDS_DXGI_FORMAT_R10G10B10_7E3_A2_FLOAT:
	case DDS_DXGI_FORMAT_R10G10B10_6E4_A2_FLOAT:
		return 32;

	default:
		return 0;
	}
}

int GetDX10FormatBitsPerComponent(DDS_DXGI_FORMAT format)
{
	switch (format)
	{
	case DDS_DXGI_FORMAT_UNKNOWN                    : return 0;
	case DDS_DXGI_FORMAT_R32G32B32A32_TYPELESS      : return 32;
	case DDS_DXGI_FORMAT_R32G32B32A32_FLOAT         : return 32;
	case DDS_DXGI_FORMAT_R32G32B32A32_UINT          : return 32;
	case DDS_DXGI_FORMAT_R32G32B32A32_SINT          : return 32;
	case DDS_DXGI_FORMAT_R32G32B32_TYPELESS         : return 32;
	case DDS_DXGI_FORMAT_R32G32B32_FLOAT            : return 32;
	case DDS_DXGI_FORMAT_R32G32B32_UINT             : return 32;
	case DDS_DXGI_FORMAT_R32G32B32_SINT             : return 32;
	case DDS_DXGI_FORMAT_R16G16B16A16_TYPELESS      : return 16;
	case DDS_DXGI_FORMAT_R16G16B16A16_FLOAT         : return 16;
	case DDS_DXGI_FORMAT_R16G16B16A16_UNORM         : return 16;
	case DDS_DXGI_FORMAT_R16G16B16A16_UINT          : return 16;
	case DDS_DXGI_FORMAT_R16G16B16A16_SNORM         : return 16;
	case DDS_DXGI_FORMAT_R16G16B16A16_SINT          : return 16;
	case DDS_DXGI_FORMAT_R32G32_TYPELESS            : return 32;
	case DDS_DXGI_FORMAT_R32G32_FLOAT               : return 32;
	case DDS_DXGI_FORMAT_R32G32_UINT                : return 32;
	case DDS_DXGI_FORMAT_R32G32_SINT                : return 32;
	case DDS_DXGI_FORMAT_R32G8X24_TYPELESS          : return 32;
	case DDS_DXGI_FORMAT_D32_FLOAT_S8X24_UINT       : return 32;
	case DDS_DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS   : return 32;
	case DDS_DXGI_FORMAT_X32_TYPELESS_G8X24_UINT    : return 24;
	case DDS_DXGI_FORMAT_R10G10B10A2_TYPELESS       : return 10;
	case DDS_DXGI_FORMAT_R10G10B10A2_UNORM          : return 10;
	case DDS_DXGI_FORMAT_R10G10B10A2_UINT           : return 10;
	case DDS_DXGI_FORMAT_R11G11B10_FLOAT            : return 11;
	case DDS_DXGI_FORMAT_R8G8B8A8_TYPELESS          : return 8;
	case DDS_DXGI_FORMAT_R8G8B8A8_UNORM             : return 8;
	case DDS_DXGI_FORMAT_R8G8B8A8_UNORM_SRGB        : return 8;
	case DDS_DXGI_FORMAT_R8G8B8A8_UINT              : return 8;
	case DDS_DXGI_FORMAT_R8G8B8A8_SNORM             : return 8;
	case DDS_DXGI_FORMAT_R8G8B8A8_SINT              : return 8;
	case DDS_DXGI_FORMAT_R16G16_TYPELESS            : return 16;
	case DDS_DXGI_FORMAT_R16G16_FLOAT               : return 16;
	case DDS_DXGI_FORMAT_R16G16_UNORM               : return 16;
	case DDS_DXGI_FORMAT_R16G16_UINT                : return 16;
	case DDS_DXGI_FORMAT_R16G16_SNORM               : return 16;
	case DDS_DXGI_FORMAT_R16G16_SINT                : return 16;
	case DDS_DXGI_FORMAT_R32_TYPELESS               : return 32;
	case DDS_DXGI_FORMAT_D32_FLOAT                  : return 32;
	case DDS_DXGI_FORMAT_R32_FLOAT                  : return 32;
	case DDS_DXGI_FORMAT_R32_UINT                   : return 32;
	case DDS_DXGI_FORMAT_R32_SINT                   : return 32;
	case DDS_DXGI_FORMAT_R24G8_TYPELESS             : return 24;
	case DDS_DXGI_FORMAT_D24_UNORM_S8_UINT          : return 24;
	case DDS_DXGI_FORMAT_R24_UNORM_X8_TYPELESS      : return 24;
	case DDS_DXGI_FORMAT_X24_TYPELESS_G8_UINT       : return 24;
	case DDS_DXGI_FORMAT_R8G8_TYPELESS              : return 8;
	case DDS_DXGI_FORMAT_R8G8_UNORM                 : return 8;
	case DDS_DXGI_FORMAT_R8G8_UINT                  : return 8;
	case DDS_DXGI_FORMAT_R8G8_SNORM                 : return 8;
	case DDS_DXGI_FORMAT_R8G8_SINT                  : return 8;
	case DDS_DXGI_FORMAT_R16_TYPELESS               : return 16;
	case DDS_DXGI_FORMAT_R16_FLOAT                  : return 16;
	case DDS_DXGI_FORMAT_D16_UNORM                  : return 16;
	case DDS_DXGI_FORMAT_R16_UNORM                  : return 16;
	case DDS_DXGI_FORMAT_R16_UINT                   : return 16;
	case DDS_DXGI_FORMAT_R16_SNORM                  : return 16;
	case DDS_DXGI_FORMAT_R16_SINT                   : return 16;
	case DDS_DXGI_FORMAT_R8_TYPELESS                : return 8;
	case DDS_DXGI_FORMAT_R8_UNORM                   : return 8;
	case DDS_DXGI_FORMAT_R8_UINT                    : return 8;
	case DDS_DXGI_FORMAT_R8_SNORM                   : return 8;
	case DDS_DXGI_FORMAT_R8_SINT                    : return 8;
	case DDS_DXGI_FORMAT_A8_UNORM                   : return 8;
	case DDS_DXGI_FORMAT_R1_UNORM                   : return 1;
	case DDS_DXGI_FORMAT_R9G9B9E5_SHAREDEXP         : return 9;
	case DDS_DXGI_FORMAT_R8G8_B8G8_UNORM            : return 8;
	case DDS_DXGI_FORMAT_G8R8_G8B8_UNORM            : return 8;
	case DDS_DXGI_FORMAT_BC1_TYPELESS               : return 8;
	case DDS_DXGI_FORMAT_BC1_UNORM                  : return 8;
	case DDS_DXGI_FORMAT_BC1_UNORM_SRGB             : return 8;
	case DDS_DXGI_FORMAT_BC2_TYPELESS               : return 8;
	case DDS_DXGI_FORMAT_BC2_UNORM                  : return 8;
	case DDS_DXGI_FORMAT_BC2_UNORM_SRGB             : return 8;
	case DDS_DXGI_FORMAT_BC3_TYPELESS               : return 8;
	case DDS_DXGI_FORMAT_BC3_UNORM                  : return 8;
	case DDS_DXGI_FORMAT_BC3_UNORM_SRGB             : return 8;
	case DDS_DXGI_FORMAT_BC4_TYPELESS               : return 8;
	case DDS_DXGI_FORMAT_BC4_UNORM                  : return 8;
	case DDS_DXGI_FORMAT_BC4_SNORM                  : return 8;
	case DDS_DXGI_FORMAT_BC5_TYPELESS               : return 8;
	case DDS_DXGI_FORMAT_BC5_UNORM                  : return 8;
	case DDS_DXGI_FORMAT_BC5_SNORM                  : return 8;
	case DDS_DXGI_FORMAT_B5G6R5_UNORM               : return 6;
	case DDS_DXGI_FORMAT_B5G5R5A1_UNORM             : return 5;
	case DDS_DXGI_FORMAT_B8G8R8A8_UNORM             : return 8;
	case DDS_DXGI_FORMAT_B8G8R8X8_UNORM             : return 8;
	case DDS_DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM : return 10;
	case DDS_DXGI_FORMAT_B8G8R8A8_TYPELESS          : return 8;
	case DDS_DXGI_FORMAT_B8G8R8A8_UNORM_SRGB        : return 8;
	case DDS_DXGI_FORMAT_B8G8R8X8_TYPELESS          : return 8;
	case DDS_DXGI_FORMAT_B8G8R8X8_UNORM_SRGB        : return 8;
	case DDS_DXGI_FORMAT_BC6H_TYPELESS              : return 16;
	case DDS_DXGI_FORMAT_BC6H_UF16                  : return 16;
	case DDS_DXGI_FORMAT_BC6H_SF16                  : return 16;
	case DDS_DXGI_FORMAT_BC7_TYPELESS               : return 8;
	case DDS_DXGI_FORMAT_BC7_UNORM                  : return 8;
	case DDS_DXGI_FORMAT_BC7_UNORM_SRGB             : return 8;
	case DDS_DXGI_FORMAT_AYUV                       : return 0;
	case DDS_DXGI_FORMAT_Y410                       : return 0;
	case DDS_DXGI_FORMAT_Y416                       : return 0;
	case DDS_DXGI_FORMAT_NV12                       : return 0;
	case DDS_DXGI_FORMAT_P010                       : return 0;
	case DDS_DXGI_FORMAT_P016                       : return 0;
	case DDS_DXGI_FORMAT_420_OPAQUE                 : return 0;
	case DDS_DXGI_FORMAT_YUY2                       : return 0;
	case DDS_DXGI_FORMAT_Y210                       : return 0;
	case DDS_DXGI_FORMAT_Y216                       : return 0;
	case DDS_DXGI_FORMAT_NV11                       : return 0;
	case DDS_DXGI_FORMAT_AI44                       : return 0;
	case DDS_DXGI_FORMAT_IA44                       : return 0;
	case DDS_DXGI_FORMAT_P8                         : return 8;
	case DDS_DXGI_FORMAT_A8P8                       : return 8;
	case DDS_DXGI_FORMAT_B4G4R4A4_UNORM             : return 4;
	case DDS_DXGI_FORMAT_R10G10B10_7E3_A2_FLOAT     : return 10;
	case DDS_DXGI_FORMAT_R10G10B10_6E4_A2_FLOAT     : return 10;
	default                                         : return 0;
	}
}

bool ConvertPixelsToDX10Format(void* dst, DDS_DXGI_FORMAT format, const void* src_Vec4f, int w, int h, bool sRGB)
{
	const Vec4f* src = reinterpret_cast<const Vec4f*>(src_Vec4f);

	if (GetDX10FormatBlockSize(format) > 1) {
		uint32 channels = 0;
		switch (format) {
		case DDS_DXGI_FORMAT_BC1_UNORM:
		case DDS_DXGI_FORMAT_BC1_UNORM_SRGB:
		case DDS_DXGI_FORMAT_BC2_UNORM:
		case DDS_DXGI_FORMAT_BC2_UNORM_SRGB:
		case DDS_DXGI_FORMAT_BC3_UNORM:
		case DDS_DXGI_FORMAT_BC3_UNORM_SRGB:
			channels = BIT(0) | BIT(1) | BIT(2) | BIT(3);
			break;
		case DDS_DXGI_FORMAT_BC4_UNORM:
			channels = BIT(0);
			break;
		case DDS_DXGI_FORMAT_BC5_UNORM:
			channels = BIT(0) | BIT(1);
			break;
		}
		if (channels == 0)
			return false;
		else if (dst) {
			const int bs = GetDX10FormatBlockSize(format);
			const int blockSizeInBytes = (GetDX10FormatBitsPerPixel(format)*bs*bs)/8;
			const int bw = (w + bs - 1)/bs;
			const int bh = (h + bs - 1)/bs;
			uint8* dstPtr = (uint8*)dst;
			for (int bj = 0; bj < bh; bj++) {
				for (int bi = 0; bi < bw; bi++) {
					uint8 srcBlock[4*4*4];
					int k = 0;
					for (int j = 0; j < bs; j++) {
						for (int i = 0; i < bs; i++) {
							Vec4f srcV = src[Min(i + bi*4, w - 1) + Min(j + bj*4, h - 1)*w];
							if (IsDX10FormatSRGB(format))
								srcV = LinearToSRGB(srcV);
							if (channels & BIT(0)) srcBlock[k++] = ConvertPixel<uint8,float>(srcV.xf());
							if (channels & BIT(1)) srcBlock[k++] = ConvertPixel<uint8,float>(srcV.yf());
							if (channels & BIT(2)) srcBlock[k++] = ConvertPixel<uint8,float>(srcV.zf());
							if (channels & BIT(3)) srcBlock[k++] = ConvertPixel<uint8,float>(srcV.wf());
							if (format == DDS_DXGI_FORMAT_BC1_UNORM || format == DDS_DXGI_FORMAT_BC1_UNORM_SRGB)
								srcBlock[k - 1] = 0xFF; // force BC1 to have 255 alpha
						}
					}
					if (format == DDS_DXGI_FORMAT_BC1_UNORM || format == DDS_DXGI_FORMAT_BC1_UNORM_SRGB)
						stb_compress_dxt_block(dstPtr, (const uint8*)srcBlock, false, STB_DXT_HIGHQUAL);
					else if (format == DDS_DXGI_FORMAT_BC2_UNORM || format == DDS_DXGI_FORMAT_BC2_UNORM_SRGB) {
						uint8 alphaBlock[8];
						for (int i = 0; i < 8; i++) {
							const uint8 a0 = srcBlock[(i*2 + 0)*4 + 3] >> 4;
							const uint8 a1 = srcBlock[(i*2 + 1)*4 + 3] >> 4;
							alphaBlock[i] = a0 | a1;
						}
						memcpy(dstPtr, alphaBlock, sizeof(alphaBlock));
						stb_compress_dxt_block(dstPtr + sizeof(alphaBlock), (const uint8*)srcBlock, false, STB_DXT_HIGHQUAL);
					} else if (format == DDS_DXGI_FORMAT_BC3_UNORM || format == DDS_DXGI_FORMAT_BC3_UNORM_SRGB)
						stb_compress_dxt_block(dstPtr, (const uint8*)srcBlock, true, STB_DXT_HIGHQUAL);
					else if (format == DDS_DXGI_FORMAT_BC4_UNORM)
						stb_compress_bc4_block(dstPtr, (const uint8*)srcBlock);
					else if (format == DDS_DXGI_FORMAT_BC5_UNORM)
						stb_compress_bc5_block(dstPtr, (const uint8*)srcBlock);
					dstPtr += blockSizeInBytes;
				}
			}
		}
		return true;
	}

	typedef float ConvertFloat32; // default static_cast behavior is ok
	typedef uint32 ConvertUint32; // default static_cast behavior is ok
	typedef int32 ConvertSint32; // default static_cast behavior is ok
	typedef uint16 ConvertUint16; // default static_cast behavior is ok
	typedef int16 ConvertSint16; // default static_cast behavior is ok
	typedef uint8 ConvertUint8; // default static_cast behavior is ok
	typedef int8 ConvertSint8; // default static_cast behavior is ok

	struct ConvertFloat16     { ConvertFloat16    (float value) : m_value(Float32toFloat16               (value))               {} uint16 m_value; };
	struct ConvertUnorm16     { ConvertUnorm16    (float value) : m_value(Float32toFixed      <uint16,16>(value))               {} uint16 m_value; };
	struct ConvertUnorm8      { ConvertUnorm8     (float value) : m_value(Float32toFixed      <uint8 ,8 >(value))               {} uint8  m_value; };
	struct ConvertSnorm16     { ConvertSnorm16    (float value) : m_value(Float32toFixedSigned<uint16,16>(value))               {} uint16 m_value; };
	struct ConvertSnorm8      { ConvertSnorm8     (float value) : m_value(Float32toFixedSigned<uint8 ,8 >(value))               {} uint8  m_value; };
	struct ConvertUnorm8_SRGB { ConvertUnorm8_SRGB(float value) : m_value(Float32toFixed      <uint8 ,8 >(LinearToSRGB(value))) {} uint8  m_value; };
	
	// NOTE -- R10G10B10A2_UNORM actually behaves like B10G10R10A2_UNORM for a non-DX10 DDS image
	struct ConvertR10G10B10A2_UNORM {
		ConvertR10G10B10A2_UNORM(const Vec4f& value)
			: r(Float32toFixed<uint32,10>(value.x()))
			, g(Float32toFixed<uint32,10>(value.y()))
			, b(Float32toFixed<uint32,10>(value.z()))
			, a(Float32toFixed<uint32,2>(value.w())) {}
		uint32 r:10, g:10, b:10, a:2;
	};

	struct ConvertR10G10B10A2_UINT {
		ConvertR10G10B10A2_UINT(const Vec4f& value)
			: r((uint32)value.x())
			, g((uint32)value.y())
			, b((uint32)value.z())
			, a((uint32)value.w()) {}
		uint32 r:10, g:10, b:10, a:2;
	};

	struct ConvertR9G9B9E5_SHAREDEXP {
		ConvertR9G9B9E5_SHAREDEXP(const Vec4f& value) {
		#if 0 // this code definitely doesn't work (yet) ..
			const uint32 manBits_float32 = 23;
			const uint32 expBias_float32 = 127;
			const uint32 manBits = 9;
			const uint32 expBias = 15;
			const __m128i bits = _mm_loadu_si128((const __m128i*)&value);
			const __m128i signmask = _mm_srai_epi32(bits,31);
			const __m128i exponents = _mm_srli_epi32(bits,manBits_float32);
			const __m128i exp_r = _vmath_permute_epi32<0,0,0,0>(exponents);
			const __m128i exp_g = _vmath_permute_epi32<1,1,1,1>(exponents);
			const __m128i exp_b = _vmath_permute_epi32<2,2,2,2>(exponents);
			const __m128i exp_m = _mm_max_epi32(exp_r,_mm_max_epi32(exp_g,exp_b)); // max exponent
			const __m128i shift = _mm_sub_epi32(_mm_set1_epi32(manBits_float32 + 1 - manBits),_mm_sub_epi32(exp_m,exponents)); // how much to shift the fractions right
			__m128i temp = _mm_and_si128(bits,_mm_set1_epi32(BITMASK(uint32,manBits_float32)));
			temp = _mm_add_epi32(temp,_mm_set1_epi32(BIT(manBits_float32))); // prepend leading 1 bit to mantissas (so they are actual fractions)
			temp = _mm_andnot_si128(signmask,temp); // make components zero if sign bits were set
			r = temp.m128i_u32[0] >> shift.m128i_u32[0]; // can't use _mm_srl_epi32 because it shifts all components the same amount
			g = temp.m128i_u32[1] >> shift.m128i_u32[1];
			b = temp.m128i_u32[2] >> shift.m128i_u32[2];
			e = exp_m.m128i_i32[0] - expBias_float32 + expBias + 1;
		#else // this code basically works, although i'm not sure it's 100% correct
			const Vec3V rgb = Max(Vec3V(V_ZERO),Vec3V(VEC3V_ARGS(value)));
			const float exponent = Clamp(Ceiling(log2f(MaxElement(rgb).f())),-15.0f,16.0f);
			const float scale = 512.0f*powf(0.5f,exponent);
			r = Min((uint32)(value.xf()*scale),511U);
			g = Min((uint32)(value.yf()*scale),511U);
			b = Min((uint32)(value.zf()*scale),511U);
			e = (uint32)(exponent + 15.0f);
		#endif
		}
		uint32 r:9, g:9, b:9, e:5;
	};

	struct ConvertB5G6R5_UNORM {
		ConvertB5G6R5_UNORM(const Vec4f& value)
			: b(Float32toFixed<uint16,5>(value.z()))
			, g(Float32toFixed<uint16,6>(value.y()))
			, r(Float32toFixed<uint16,5>(value.x())) {}
		uint16 b:5, g:6, r:5;
	};

	struct ConvertB5G5R5A1_UNORM {
		ConvertB5G5R5A1_UNORM(const Vec4f& value)
			: b(Float32toFixed<uint16,5>(value.z()))
			, g(Float32toFixed<uint16,5>(value.y()))
			, r(Float32toFixed<uint16,5>(value.x()))
			, a(Float32toFixed<uint16,1>(value.w())) {}
		uint16 b:5, g:5, r:5, a:1;
	};

	struct ConvertB4G4R4A4_UNORM {
		ConvertB4G4R4A4_UNORM(const Vec4f& value)
			: b(Float32toFixed<uint16,4>(value.z()))
			, g(Float32toFixed<uint16,4>(value.y()))
			, r(Float32toFixed<uint16,4>(value.x()))
			, a(Float32toFixed<uint16,4>(value.w())) {}
		uint16 b:4, g:4, r:4, a:4;
	};

	struct ConvertR11G11B10_FLOAT {
		ConvertR11G11B10_FLOAT(const Vec4f& value)
			: r(Float32toSmallFloatUnsigned<uint32,6,5>(value.x()))
			, g(Float32toSmallFloatUnsigned<uint32,6,5>(value.y()))
			, b(Float32toSmallFloatUnsigned<uint32,5,5>(value.z())) {}
		uint32 r:11, g:11, b:10;
	};

	struct ConvertR10G10B10_7E3_A2_FLOAT {
		ConvertR10G10B10_7E3_A2_FLOAT(const Vec4f& value)
			: r(Float32toSmallFloatUnsigned<uint32,7,3>(value.x()))
			, g(Float32toSmallFloatUnsigned<uint32,7,3>(value.y()))
			, b(Float32toSmallFloatUnsigned<uint32,7,3>(value.z()))
			, a(Float32toFixed<uint32,2>(value.w())) {}
		uint32 r:10, g:10, b:10, a:2;
	};

	struct ConvertR10G10B10_6E4_A2_FLOAT {
		ConvertR10G10B10_6E4_A2_FLOAT(const Vec4f& value)
			: r(Float32toSmallFloatUnsigned<uint32,6,4>(value.x()))
			, g(Float32toSmallFloatUnsigned<uint32,6,4>(value.y()))
			, b(Float32toSmallFloatUnsigned<uint32,6,4>(value.z()))
			, a(Float32toFixed<uint32,2>(value.w())) {}
		uint32 r:10, g:10, b:10, a:2;
	};

	#define CONVERT_PIXELS(T,dst,src,count)              if (dst) { T* temp = (T*)dst; for (int i = 0; i < count; i++) { *temp++ = (T)src[i]; }} return true;
	#define CONVERT_PIXELS_RGBA(T,dst,src,count)         if (dst) { T* temp = (T*)dst; for (int i = 0; i < count; i++) { *temp++ = (T)src[i].x(); *temp++ = (T)src[i].y(); *temp++ = (T)src[i].z(); *temp++ = (T)src[i].w(); }} return true;
	#define CONVERT_PIXELS_BGRA(T,dst,src,count)         if (dst) { T* temp = (T*)dst; for (int i = 0; i < count; i++) { *temp++ = (T)src[i].z(); *temp++ = (T)src[i].y(); *temp++ = (T)src[i].x(); *temp++ = (T)src[i].w(); }} return true;
	#define CONVERT_PIXELS_BGR0(T,dst,src,count)         if (dst) { T* temp = (T*)dst; for (int i = 0; i < count; i++) { *temp++ = (T)src[i].z(); *temp++ = (T)src[i].y(); *temp++ = (T)src[i].x(); memset(temp++, 0, sizeof(T)); }} return true;
	#define CONVERT_PIXELS_RGBA_SRGB(T,Ta,dst,src,count) if (dst) { T* temp = (T*)dst; for (int i = 0; i < count; i++) { *temp++ = (T)src[i].x(); *temp++ = (T)src[i].y(); *temp++ = (T)src[i].z(); *(Ta*)temp++ = (Ta)src[i].w(); }} return true;
	#define CONVERT_PIXELS_BGRA_SRGB(T,Ta,dst,src,count) if (dst) { T* temp = (T*)dst; for (int i = 0; i < count; i++) { *temp++ = (T)src[i].z(); *temp++ = (T)src[i].y(); *temp++ = (T)src[i].x(); *(Ta*)temp++ = (Ta)src[i].w(); }} return true;
	#define CONVERT_PIXELS_BGR0_SRGB(T,dst,src,count)    if (dst) { T* temp = (T*)dst; for (int i = 0; i < count; i++) { *temp++ = (T)src[i].z(); *temp++ = (T)src[i].y(); *temp++ = (T)src[i].x(); memset(temp++, 0, sizeof(T)); }} return true;
	#define CONVERT_PIXELS_RGB(T,dst,src,count)          if (dst) { T* temp = (T*)dst; for (int i = 0; i < count; i++) { *temp++ = (T)src[i].x(); *temp++ = (T)src[i].y(); *temp++ = (T)src[i].z(); }} return true;
	#define CONVERT_PIXELS_RG(T,dst,src,count)           if (dst) { T* temp = (T*)dst; for (int i = 0; i < count; i++) { *temp++ = (T)src[i].x(); *temp++ = (T)src[i].y(); }} return true;
	#define CONVERT_PIXELS_R(T,dst,src,count)            if (dst) { T* temp = (T*)dst; for (int i = 0; i < count; i++) { *temp++ = (T)src[i].x(); }} return true;
	#define CONVERT_PIXELS_A(T,dst,src,count)            if (dst) { T* temp = (T*)dst; for (int i = 0; i < count; i++) { *temp++ = (T)src[i].w(); }} return true;
	
	if (sRGB) {
		switch (format) {
		case DDS_DXGI_FORMAT_R8G8B8A8_UNORM_SRGB : format = DDS_DXGI_FORMAT_R8G8B8A8_UNORM; break;
		case DDS_DXGI_FORMAT_B8G8R8A8_UNORM_SRGB : format = DDS_DXGI_FORMAT_B8G8R8A8_UNORM; break;
		case DDS_DXGI_FORMAT_B8G8R8X8_UNORM_SRGB : format = DDS_DXGI_FORMAT_B8G8R8X8_UNORM; break;
		case DDS_DXGI_FORMAT_BC1_UNORM_SRGB      : format = DDS_DXGI_FORMAT_BC1_UNORM     ; break;
		case DDS_DXGI_FORMAT_BC2_UNORM_SRGB      : format = DDS_DXGI_FORMAT_BC2_UNORM     ; break;
		case DDS_DXGI_FORMAT_BC3_UNORM_SRGB      : format = DDS_DXGI_FORMAT_BC3_UNORM     ; break;
		case DDS_DXGI_FORMAT_BC7_UNORM_SRGB      : format = DDS_DXGI_FORMAT_BC7_UNORM     ; break;
		}
	}

	const int count = w*h;
	switch (format) {
//	case DDS_DXGI_FORMAT_UNKNOWN                    : assert(false); break;
//	case DDS_DXGI_FORMAT_R32G32B32A32_TYPELESS      : assert(false); break;
	case DDS_DXGI_FORMAT_R32G32B32A32_FLOAT         : if (dst) { memcpy(dst, src, count*sizeof(Vec4f)); } return true;
	case DDS_DXGI_FORMAT_R32G32B32A32_UINT          : CONVERT_PIXELS_RGBA(ConvertUint32,dst,src,count);
	case DDS_DXGI_FORMAT_R32G32B32A32_SINT          : CONVERT_PIXELS_RGBA(ConvertSint32,dst,src,count);
//	case DDS_DXGI_FORMAT_R32G32B32_TYPELESS         : assert(false); break;
	case DDS_DXGI_FORMAT_R32G32B32_FLOAT            : CONVERT_PIXELS_RGB(ConvertFloat32,dst,src,count);
	case DDS_DXGI_FORMAT_R32G32B32_UINT             : CONVERT_PIXELS_RGB(ConvertUint32,dst,src,count);
	case DDS_DXGI_FORMAT_R32G32B32_SINT             : CONVERT_PIXELS_RGB(ConvertSint32,dst,src,count);
//	case DDS_DXGI_FORMAT_R16G16B16A16_TYPELESS      : assert(false); break;
	case DDS_DXGI_FORMAT_R16G16B16A16_FLOAT         : CONVERT_PIXELS_RGBA(ConvertFloat16,dst,src,count);
	case DDS_DXGI_FORMAT_R16G16B16A16_UNORM         : CONVERT_PIXELS_RGBA(ConvertUnorm16,dst,src,count);
	case DDS_DXGI_FORMAT_R16G16B16A16_UINT          : CONVERT_PIXELS_RGBA(ConvertUint16,dst,src,count);
	case DDS_DXGI_FORMAT_R16G16B16A16_SNORM         : CONVERT_PIXELS_RGBA(ConvertSnorm16,dst,src,count);
	case DDS_DXGI_FORMAT_R16G16B16A16_SINT          : CONVERT_PIXELS_RGBA(ConvertSint16,dst,src,count);
//	case DDS_DXGI_FORMAT_R32G32_TYPELESS            : assert(false); break;
	case DDS_DXGI_FORMAT_R32G32_FLOAT               : CONVERT_PIXELS_RG(ConvertFloat32,dst,src,count);
	case DDS_DXGI_FORMAT_R32G32_UINT                : CONVERT_PIXELS_RG(ConvertUint32,dst,src,count);
	case DDS_DXGI_FORMAT_R32G32_SINT                : CONVERT_PIXELS_RG(ConvertSint32,dst,src,count);
//	case DDS_DXGI_FORMAT_R32G8X24_TYPELESS          : assert(false); break;
//	case DDS_DXGI_FORMAT_D32_FLOAT_S8X24_UINT       : assert(false); break;
//	case DDS_DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS   : assert(false); break;
//	case DDS_DXGI_FORMAT_X32_TYPELESS_G8X24_UINT    : assert(false); break;
//	case DDS_DXGI_FORMAT_R10G10B10A2_TYPELESS       : assert(false); break;
	case DDS_DXGI_FORMAT_R10G10B10A2_UNORM          : CONVERT_PIXELS(ConvertR10G10B10A2_UNORM,dst,src,count);
	case DDS_DXGI_FORMAT_R10G10B10A2_UINT           : CONVERT_PIXELS(ConvertR10G10B10A2_UINT,dst,src,count);
	case DDS_DXGI_FORMAT_R11G11B10_FLOAT            : CONVERT_PIXELS(ConvertR11G11B10_FLOAT,dst,src,count);
//	case DDS_DXGI_FORMAT_R8G8B8A8_TYPELESS          : assert(false); break;
	case DDS_DXGI_FORMAT_R8G8B8A8_UNORM             : CONVERT_PIXELS_RGBA(ConvertUnorm8,dst,src,count);
	case DDS_DXGI_FORMAT_R8G8B8A8_UNORM_SRGB        : CONVERT_PIXELS_RGBA_SRGB(ConvertUnorm8_SRGB,ConvertUnorm8,dst,src,count);
	case DDS_DXGI_FORMAT_R8G8B8A8_UINT              : CONVERT_PIXELS_RGBA(ConvertUint8,dst,src,count);
	case DDS_DXGI_FORMAT_R8G8B8A8_SNORM             : CONVERT_PIXELS_RGBA(ConvertSnorm8,dst,src,count);
	case DDS_DXGI_FORMAT_R8G8B8A8_SINT              : CONVERT_PIXELS_RGBA(ConvertSint8,dst,src,count);
//	case DDS_DXGI_FORMAT_R16G16_TYPELESS            : assert(false); break;
	case DDS_DXGI_FORMAT_R16G16_FLOAT               : CONVERT_PIXELS_RG(ConvertFloat16,dst,src,count);
	case DDS_DXGI_FORMAT_R16G16_UNORM               : CONVERT_PIXELS_RG(ConvertUnorm16,dst,src,count);
	case DDS_DXGI_FORMAT_R16G16_UINT                : CONVERT_PIXELS_RG(ConvertUint16,dst,src,count);
	case DDS_DXGI_FORMAT_R16G16_SNORM               : CONVERT_PIXELS_RG(ConvertSnorm16,dst,src,count);
	case DDS_DXGI_FORMAT_R16G16_SINT                : CONVERT_PIXELS_RG(ConvertSint16,dst,src,count);
//	case DDS_DXGI_FORMAT_R32_TYPELESS               : assert(false); break;
	case DDS_DXGI_FORMAT_D32_FLOAT                  : CONVERT_PIXELS_R(ConvertFloat32,dst,src,count);
	case DDS_DXGI_FORMAT_R32_FLOAT                  : CONVERT_PIXELS_R(ConvertFloat32,dst,src,count);
	case DDS_DXGI_FORMAT_R32_UINT                   : CONVERT_PIXELS_R(ConvertUint32,dst,src,count);
	case DDS_DXGI_FORMAT_R32_SINT                   : CONVERT_PIXELS_R(ConvertSint32,dst,src,count);
//	case DDS_DXGI_FORMAT_R24G8_TYPELESS             : assert(false); break;
//	case DDS_DXGI_FORMAT_D24_UNORM_S8_UINT          : assert(false); break;
//	case DDS_DXGI_FORMAT_R24_UNORM_X8_TYPELESS      : assert(false); break;
//	case DDS_DXGI_FORMAT_X24_TYPELESS_G8_UINT       : assert(false); break;
//	case DDS_DXGI_FORMAT_R8G8_TYPELESS              : assert(false); break;
	case DDS_DXGI_FORMAT_R8G8_UNORM                 : CONVERT_PIXELS_RG(ConvertUnorm8,dst,src,count);
	case DDS_DXGI_FORMAT_R8G8_UINT                  : CONVERT_PIXELS_RG(ConvertUint8,dst,src,count);
	case DDS_DXGI_FORMAT_R8G8_SNORM                 : CONVERT_PIXELS_RG(ConvertSnorm8,dst,src,count);
	case DDS_DXGI_FORMAT_R8G8_SINT                  : CONVERT_PIXELS_RG(ConvertSint8,dst,src,count);
//	case DDS_DXGI_FORMAT_R16_TYPELESS               : assert(false); break;
	case DDS_DXGI_FORMAT_R16_FLOAT                  : CONVERT_PIXELS_R(ConvertFloat16,dst,src,count);
	case DDS_DXGI_FORMAT_D16_UNORM                  : CONVERT_PIXELS_R(ConvertUnorm16,dst,src,count);
	case DDS_DXGI_FORMAT_R16_UNORM                  : CONVERT_PIXELS_R(ConvertUnorm16,dst,src,count);
	case DDS_DXGI_FORMAT_R16_UINT                   : CONVERT_PIXELS_R(ConvertUint16,dst,src,count);
	case DDS_DXGI_FORMAT_R16_SNORM                  : CONVERT_PIXELS_R(ConvertSnorm16,dst,src,count);
	case DDS_DXGI_FORMAT_R16_SINT                   : CONVERT_PIXELS_R(ConvertSint16,dst,src,count);
//	case DDS_DXGI_FORMAT_R8_TYPELESS                : assert(false); break;
	case DDS_DXGI_FORMAT_R8_UNORM                   : CONVERT_PIXELS_R(ConvertUnorm8,dst,src,count);
	case DDS_DXGI_FORMAT_R8_UINT                    : CONVERT_PIXELS_R(ConvertUint8,dst,src,count);
	case DDS_DXGI_FORMAT_R8_SNORM                   : CONVERT_PIXELS_R(ConvertSnorm8,dst,src,count);
	case DDS_DXGI_FORMAT_R8_SINT                    : CONVERT_PIXELS_R(ConvertSint8,dst,src,count);
	case DDS_DXGI_FORMAT_A8_UNORM                   : CONVERT_PIXELS_A(ConvertUnorm8,dst,src,count);
//	case DDS_DXGI_FORMAT_R1_UNORM                   : assert(false); break;
	case DDS_DXGI_FORMAT_R9G9B9E5_SHAREDEXP         : CONVERT_PIXELS(ConvertR9G9B9E5_SHAREDEXP,dst,src,count);
//	case DDS_DXGI_FORMAT_R8G8_B8G8_UNORM            : assert(false); break; // TODO -- 2x1 block compression
//	case DDS_DXGI_FORMAT_G8R8_G8B8_UNORM            : assert(false); break; // TODO -- 2x1 block compression
//	case DDS_DXGI_FORMAT_BC1_TYPELESS               : assert(false); break; 
//	case DDS_DXGI_FORMAT_BC1_UNORM                  : assert(false); break; // handled separately
//	case DDS_DXGI_FORMAT_BC1_UNORM_SRGB             : assert(false); break; // handled separately
//	case DDS_DXGI_FORMAT_BC2_TYPELESS               : assert(false); break;
//	case DDS_DXGI_FORMAT_BC2_UNORM                  : assert(false); break; // handled separately
//	case DDS_DXGI_FORMAT_BC2_UNORM_SRGB             : assert(false); break; // handled separately
//	case DDS_DXGI_FORMAT_BC3_TYPELESS               : assert(false); break;
//	case DDS_DXGI_FORMAT_BC3_UNORM                  : assert(false); break; // handled separately
//	case DDS_DXGI_FORMAT_BC3_UNORM_SRGB             : assert(false); break; // handled separately
//	case DDS_DXGI_FORMAT_BC4_TYPELESS               : assert(false); break;
//	case DDS_DXGI_FORMAT_BC4_UNORM                  : assert(false); break; // handled separately
//	case DDS_DXGI_FORMAT_BC4_SNORM                  : assert(false); break; // TODO -- snorm
//	case DDS_DXGI_FORMAT_BC5_TYPELESS               : assert(false); break;
//	case DDS_DXGI_FORMAT_BC5_UNORM                  : assert(false); break; // handled separately
//	case DDS_DXGI_FORMAT_BC5_SNORM                  : assert(false); break; // TODO -- snorm
	case DDS_DXGI_FORMAT_B5G6R5_UNORM               : CONVERT_PIXELS(ConvertB5G6R5_UNORM,dst,src,count);
	case DDS_DXGI_FORMAT_B5G5R5A1_UNORM             : CONVERT_PIXELS(ConvertB5G5R5A1_UNORM,dst,src,count);
	case DDS_DXGI_FORMAT_B8G8R8A8_UNORM             : CONVERT_PIXELS_BGRA(ConvertUnorm8,dst,src,count);
	case DDS_DXGI_FORMAT_B8G8R8X8_UNORM             : CONVERT_PIXELS_BGR0(ConvertUnorm8,dst,src,count);
//	case DDS_DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM : assert(false); break;
//	case DDS_DXGI_FORMAT_B8G8R8A8_TYPELESS          : assert(false); break;
	case DDS_DXGI_FORMAT_B8G8R8A8_UNORM_SRGB        : CONVERT_PIXELS_BGRA_SRGB(ConvertUnorm8_SRGB,ConvertUnorm8,dst,src,count);
//	case DDS_DXGI_FORMAT_B8G8R8X8_TYPELESS          : assert(false); break;
	case DDS_DXGI_FORMAT_B8G8R8X8_UNORM_SRGB        : CONVERT_PIXELS_BGR0_SRGB(ConvertUnorm8_SRGB,dst,src,count);
//	case DDS_DXGI_FORMAT_BC6H_TYPELESS              : assert(false); break;
//	case DDS_DXGI_FORMAT_BC6H_UF16                  : assert(false); break; // TODO
//	case DDS_DXGI_FORMAT_BC6H_SF16                  : assert(false); break; // TODO
//	case DDS_DXGI_FORMAT_BC7_TYPELESS               : assert(false); break;
//	case DDS_DXGI_FORMAT_BC7_UNORM                  : assert(false); break; // TODO
//	case DDS_DXGI_FORMAT_BC7_UNORM_SRGB             : assert(false); break; // TODO
//	case DDS_DXGI_FORMAT_AYUV                       : assert(false); break;
//	case DDS_DXGI_FORMAT_Y410                       : assert(false); break;
//	case DDS_DXGI_FORMAT_Y416                       : assert(false); break;
//	case DDS_DXGI_FORMAT_NV12                       : assert(false); break;
//	case DDS_DXGI_FORMAT_P010                       : assert(false); break;
//	case DDS_DXGI_FORMAT_P016                       : assert(false); break;
//	case DDS_DXGI_FORMAT_420_OPAQUE                 : assert(false); break;
//	case DDS_DXGI_FORMAT_YUY2                       : assert(false); break;
//	case DDS_DXGI_FORMAT_Y210                       : assert(false); break;
//	case DDS_DXGI_FORMAT_Y216                       : assert(false); break;
//	case DDS_DXGI_FORMAT_NV11                       : assert(false); break;
//	case DDS_DXGI_FORMAT_AI44                       : assert(false); break;
//	case DDS_DXGI_FORMAT_IA44                       : assert(false); break;
//	case DDS_DXGI_FORMAT_P8                         : assert(false); break;
//	case DDS_DXGI_FORMAT_A8P8                       : assert(false); break;
	case DDS_DXGI_FORMAT_B4G4R4A4_UNORM             : CONVERT_PIXELS(ConvertB4G4R4A4_UNORM,dst,src,count);
	case DDS_DXGI_FORMAT_R10G10B10_7E3_A2_FLOAT     : CONVERT_PIXELS(ConvertR10G10B10_7E3_A2_FLOAT,dst,src,count);
	case DDS_DXGI_FORMAT_R10G10B10_6E4_A2_FLOAT     : CONVERT_PIXELS(ConvertR10G10B10_6E4_A2_FLOAT,dst,src,count);
	default: return false;
	}
	return true;

	#undef CONVERT_PIXELS
	#undef CONVERT_PIXELS_RGBA
	#undef CONVERT_PIXELS_BGRA
	#undef CONVERT_PIXELS_BGR0
	#undef CONVERT_PIXELS_RGBA_SRGB
	#undef CONVERT_PIXELS_BGRA_SRGB
	#undef CONVERT_PIXELS_BGR0_SRGB
	#undef CONVERT_PIXELS_RGB
	#undef CONVERT_PIXELS_RG
	#undef CONVERT_PIXELS_R
	#undef CONVERT_PIXELS_A
}

int GetMaxMipCount(int w, int h, int d, bool bAllowNonPow2Scaling)
{
	for (int i = 0; i < 20; i++)
	{
		const int mw = Max(1, w>>i);
		const int mh = Max(1, h>>i);
		const int md = Max(1, d>>i);

		if (mw == 1 && mh == 1 && md == 1)
		{
			return i + 1; // this mip index is valid, but the next one won't be
		}
		else if ((w%mw != 0 || h%mh != 0 || d%md != 0) && !bAllowNonPow2Scaling)
		{
			return i; // this mip index is not valid, so the previous one was the last valid one
		}
	}

	assert(0);
	return 1; // should never get here
}

int GetImageSizeInBytes(DDS_DXGI_FORMAT dxgiFormat, int w, int h, int d, int mips, int layers, DDS_IMAGE_TYPE imageType)
{
	const int bpp = GetDX10FormatBitsPerPixel(dxgiFormat);
	const int blockSize = GetDX10FormatBlockSize(dxgiFormat); // will be either 1 or 4
	int sizeInBytes = 0;

	for (int mip = 0; mip < mips; mip++)
	{
		const int mw = Max(1, w>>mip);
		const int mh = Max(1, h>>mip);
		const int md = Max(1, d>>mip);

		const int physicalW = (mw + blockSize - 1)&~(blockSize - 1);
		const int physicalH = (mh + blockSize - 1)&~(blockSize - 1);

		sizeInBytes += (physicalW*physicalH*md*bpp)/8;
	}

	if (imageType == DDS_IMAGE_TYPE_CUBE)
	{
		sizeInBytes *= 6;
	}

	return sizeInBytes*layers;
}

int GetOffsetToSlice(DDS_DXGI_FORMAT dxgiFormat, int w, int h, int d, int mips, int mipIndex, int layerIndex, DDS_IMAGE_TYPE type, int cubeFaceIndex)
{
	const int sliceSizeInBytes = GetImageSizeInBytes(dxgiFormat, w, h, d, mips); // size of all mips for a single array slice (or 2D cube face)
	const int offsetInBytes = GetImageSizeInBytes(dxgiFormat, w, h, d, mipIndex);
	const int numCubeFaces = (type == DDS_IMAGE_TYPE_CUBE) ? 6 : 1;
	return offsetInBytes + (layerIndex*numCubeFaces + cubeFaceIndex)*sliceSizeInBytes;
}

bool IsDX10FormatSRGB(DDS_DXGI_FORMAT format)
{
	if (format == DDS_DXGI_FORMAT_BC1_UNORM_SRGB ||
		format == DDS_DXGI_FORMAT_BC2_UNORM_SRGB ||
		format == DDS_DXGI_FORMAT_BC3_UNORM_SRGB ||
		format == DDS_DXGI_FORMAT_BC7_UNORM_SRGB ||
		format == DDS_DXGI_FORMAT_R8G8B8A8_UNORM_SRGB ||
		format == DDS_DXGI_FORMAT_B8G8R8A8_UNORM_SRGB ||
		format == DDS_DXGI_FORMAT_B8G8R8X8_UNORM_SRGB)
		return true;
	else
		return false;
}

DDS_FORMAT_TYPE GetDX10FormatType(DDS_DXGI_FORMAT format)
{
	switch (format)
	{
	case DDS_DXGI_FORMAT_UNKNOWN                    : return DDS_FORMAT_TYPE_UNKNOWN;
	case DDS_DXGI_FORMAT_R32G32B32A32_TYPELESS      : return DDS_FORMAT_TYPE_TYPELESS;
	case DDS_DXGI_FORMAT_R32G32B32A32_FLOAT         : return DDS_FORMAT_TYPE_FLOAT;
	case DDS_DXGI_FORMAT_R32G32B32A32_UINT          : return DDS_FORMAT_TYPE_UINT;
	case DDS_DXGI_FORMAT_R32G32B32A32_SINT          : return DDS_FORMAT_TYPE_SINT;
	case DDS_DXGI_FORMAT_R32G32B32_TYPELESS         : return DDS_FORMAT_TYPE_TYPELESS;
	case DDS_DXGI_FORMAT_R32G32B32_FLOAT            : return DDS_FORMAT_TYPE_FLOAT;
	case DDS_DXGI_FORMAT_R32G32B32_UINT             : return DDS_FORMAT_TYPE_UINT;
	case DDS_DXGI_FORMAT_R32G32B32_SINT             : return DDS_FORMAT_TYPE_SINT;
	case DDS_DXGI_FORMAT_R16G16B16A16_TYPELESS      : return DDS_FORMAT_TYPE_TYPELESS;
	case DDS_DXGI_FORMAT_R16G16B16A16_FLOAT         : return DDS_FORMAT_TYPE_FLOAT;
	case DDS_DXGI_FORMAT_R16G16B16A16_UNORM         : return DDS_FORMAT_TYPE_UNORM;
	case DDS_DXGI_FORMAT_R16G16B16A16_UINT          : return DDS_FORMAT_TYPE_UINT;
	case DDS_DXGI_FORMAT_R16G16B16A16_SNORM         : return DDS_FORMAT_TYPE_SNORM;
	case DDS_DXGI_FORMAT_R16G16B16A16_SINT          : return DDS_FORMAT_TYPE_SINT;
	case DDS_DXGI_FORMAT_R32G32_TYPELESS            : return DDS_FORMAT_TYPE_TYPELESS;
	case DDS_DXGI_FORMAT_R32G32_FLOAT               : return DDS_FORMAT_TYPE_FLOAT;
	case DDS_DXGI_FORMAT_R32G32_UINT                : return DDS_FORMAT_TYPE_UINT;
	case DDS_DXGI_FORMAT_R32G32_SINT                : return DDS_FORMAT_TYPE_SINT;
	case DDS_DXGI_FORMAT_R32G8X24_TYPELESS          : return DDS_FORMAT_TYPE_TYPELESS;
	case DDS_DXGI_FORMAT_D32_FLOAT_S8X24_UINT       : return DDS_FORMAT_TYPE_OTHER;
	case DDS_DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS   : return DDS_FORMAT_TYPE_TYPELESS;
	case DDS_DXGI_FORMAT_X32_TYPELESS_G8X24_UINT    : return DDS_FORMAT_TYPE_TYPELESS;
	case DDS_DXGI_FORMAT_R10G10B10A2_TYPELESS       : return DDS_FORMAT_TYPE_TYPELESS;
	case DDS_DXGI_FORMAT_R10G10B10A2_UNORM          : return DDS_FORMAT_TYPE_UNORM;
	case DDS_DXGI_FORMAT_R10G10B10A2_UINT           : return DDS_FORMAT_TYPE_UINT;
	case DDS_DXGI_FORMAT_R11G11B10_FLOAT            : return DDS_FORMAT_TYPE_FLOAT;
	case DDS_DXGI_FORMAT_R8G8B8A8_TYPELESS          : return DDS_FORMAT_TYPE_TYPELESS;
	case DDS_DXGI_FORMAT_R8G8B8A8_UNORM             : return DDS_FORMAT_TYPE_UNORM;
	case DDS_DXGI_FORMAT_R8G8B8A8_UNORM_SRGB        : return DDS_FORMAT_TYPE_UNORM_SRGB;
	case DDS_DXGI_FORMAT_R8G8B8A8_UINT              : return DDS_FORMAT_TYPE_UINT;
	case DDS_DXGI_FORMAT_R8G8B8A8_SNORM             : return DDS_FORMAT_TYPE_SNORM;
	case DDS_DXGI_FORMAT_R8G8B8A8_SINT              : return DDS_FORMAT_TYPE_SINT;
	case DDS_DXGI_FORMAT_R16G16_TYPELESS            : return DDS_FORMAT_TYPE_TYPELESS;
	case DDS_DXGI_FORMAT_R16G16_FLOAT               : return DDS_FORMAT_TYPE_FLOAT;
	case DDS_DXGI_FORMAT_R16G16_UNORM               : return DDS_FORMAT_TYPE_UNORM;
	case DDS_DXGI_FORMAT_R16G16_UINT                : return DDS_FORMAT_TYPE_UINT;
	case DDS_DXGI_FORMAT_R16G16_SNORM               : return DDS_FORMAT_TYPE_SNORM;
	case DDS_DXGI_FORMAT_R16G16_SINT                : return DDS_FORMAT_TYPE_SINT;
	case DDS_DXGI_FORMAT_R32_TYPELESS               : return DDS_FORMAT_TYPE_TYPELESS;
	case DDS_DXGI_FORMAT_D32_FLOAT                  : return DDS_FORMAT_TYPE_OTHER;
	case DDS_DXGI_FORMAT_R32_FLOAT                  : return DDS_FORMAT_TYPE_FLOAT;
	case DDS_DXGI_FORMAT_R32_UINT                   : return DDS_FORMAT_TYPE_UINT;
	case DDS_DXGI_FORMAT_R32_SINT                   : return DDS_FORMAT_TYPE_SINT;
	case DDS_DXGI_FORMAT_R24G8_TYPELESS             : return DDS_FORMAT_TYPE_TYPELESS;
	case DDS_DXGI_FORMAT_D24_UNORM_S8_UINT          : return DDS_FORMAT_TYPE_OTHER;
	case DDS_DXGI_FORMAT_R24_UNORM_X8_TYPELESS      : return DDS_FORMAT_TYPE_TYPELESS;
	case DDS_DXGI_FORMAT_X24_TYPELESS_G8_UINT       : return DDS_FORMAT_TYPE_TYPELESS;
	case DDS_DXGI_FORMAT_R8G8_TYPELESS              : return DDS_FORMAT_TYPE_TYPELESS;
	case DDS_DXGI_FORMAT_R8G8_UNORM                 : return DDS_FORMAT_TYPE_UNORM;
	case DDS_DXGI_FORMAT_R8G8_UINT                  : return DDS_FORMAT_TYPE_UINT;
	case DDS_DXGI_FORMAT_R8G8_SNORM                 : return DDS_FORMAT_TYPE_SNORM;
	case DDS_DXGI_FORMAT_R8G8_SINT                  : return DDS_FORMAT_TYPE_SINT;
	case DDS_DXGI_FORMAT_R16_TYPELESS               : return DDS_FORMAT_TYPE_TYPELESS;
	case DDS_DXGI_FORMAT_R16_FLOAT                  : return DDS_FORMAT_TYPE_FLOAT;
	case DDS_DXGI_FORMAT_D16_UNORM                  : return DDS_FORMAT_TYPE_OTHER;
	case DDS_DXGI_FORMAT_R16_UNORM                  : return DDS_FORMAT_TYPE_UNORM;
	case DDS_DXGI_FORMAT_R16_UINT                   : return DDS_FORMAT_TYPE_UINT;
	case DDS_DXGI_FORMAT_R16_SNORM                  : return DDS_FORMAT_TYPE_SNORM;
	case DDS_DXGI_FORMAT_R16_SINT                   : return DDS_FORMAT_TYPE_SINT;
	case DDS_DXGI_FORMAT_R8_TYPELESS                : return DDS_FORMAT_TYPE_TYPELESS;
	case DDS_DXGI_FORMAT_R8_UNORM                   : return DDS_FORMAT_TYPE_UNORM;
	case DDS_DXGI_FORMAT_R8_UINT                    : return DDS_FORMAT_TYPE_UINT;
	case DDS_DXGI_FORMAT_R8_SNORM                   : return DDS_FORMAT_TYPE_SNORM;
	case DDS_DXGI_FORMAT_R8_SINT                    : return DDS_FORMAT_TYPE_SINT;
	case DDS_DXGI_FORMAT_A8_UNORM                   : return DDS_FORMAT_TYPE_UNORM;
	case DDS_DXGI_FORMAT_R1_UNORM                   : return DDS_FORMAT_TYPE_OTHER;
	case DDS_DXGI_FORMAT_R9G9B9E5_SHAREDEXP         : return DDS_FORMAT_TYPE_OTHER;
	case DDS_DXGI_FORMAT_R8G8_B8G8_UNORM            : return DDS_FORMAT_TYPE_OTHER;
	case DDS_DXGI_FORMAT_G8R8_G8B8_UNORM            : return DDS_FORMAT_TYPE_OTHER;
	case DDS_DXGI_FORMAT_BC1_TYPELESS               : return DDS_FORMAT_TYPE_TYPELESS;
	case DDS_DXGI_FORMAT_BC1_UNORM                  : return DDS_FORMAT_TYPE_COMPRESSED;
	case DDS_DXGI_FORMAT_BC1_UNORM_SRGB             : return DDS_FORMAT_TYPE_COMPRESSED;
	case DDS_DXGI_FORMAT_BC2_TYPELESS               : return DDS_FORMAT_TYPE_TYPELESS;
	case DDS_DXGI_FORMAT_BC2_UNORM                  : return DDS_FORMAT_TYPE_COMPRESSED;
	case DDS_DXGI_FORMAT_BC2_UNORM_SRGB             : return DDS_FORMAT_TYPE_COMPRESSED;
	case DDS_DXGI_FORMAT_BC3_TYPELESS               : return DDS_FORMAT_TYPE_TYPELESS;
	case DDS_DXGI_FORMAT_BC3_UNORM                  : return DDS_FORMAT_TYPE_COMPRESSED;
	case DDS_DXGI_FORMAT_BC3_UNORM_SRGB             : return DDS_FORMAT_TYPE_COMPRESSED;
	case DDS_DXGI_FORMAT_BC4_TYPELESS               : return DDS_FORMAT_TYPE_TYPELESS;
	case DDS_DXGI_FORMAT_BC4_UNORM                  : return DDS_FORMAT_TYPE_COMPRESSED;
	case DDS_DXGI_FORMAT_BC4_SNORM                  : return DDS_FORMAT_TYPE_COMPRESSED;
	case DDS_DXGI_FORMAT_BC5_TYPELESS               : return DDS_FORMAT_TYPE_TYPELESS;
	case DDS_DXGI_FORMAT_BC5_UNORM                  : return DDS_FORMAT_TYPE_COMPRESSED;
	case DDS_DXGI_FORMAT_BC5_SNORM                  : return DDS_FORMAT_TYPE_COMPRESSED;
	case DDS_DXGI_FORMAT_B5G6R5_UNORM               : return DDS_FORMAT_TYPE_UNORM;
	case DDS_DXGI_FORMAT_B5G5R5A1_UNORM             : return DDS_FORMAT_TYPE_UNORM;
	case DDS_DXGI_FORMAT_B8G8R8A8_UNORM             : return DDS_FORMAT_TYPE_UNORM;
	case DDS_DXGI_FORMAT_B8G8R8X8_UNORM             : return DDS_FORMAT_TYPE_UNORM;
	case DDS_DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM : return DDS_FORMAT_TYPE_OTHER;
	case DDS_DXGI_FORMAT_B8G8R8A8_TYPELESS          : return DDS_FORMAT_TYPE_TYPELESS;
	case DDS_DXGI_FORMAT_B8G8R8A8_UNORM_SRGB        : return DDS_FORMAT_TYPE_UNORM_SRGB;
	case DDS_DXGI_FORMAT_B8G8R8X8_TYPELESS          : return DDS_FORMAT_TYPE_TYPELESS;
	case DDS_DXGI_FORMAT_B8G8R8X8_UNORM_SRGB        : return DDS_FORMAT_TYPE_UNORM_SRGB;
	case DDS_DXGI_FORMAT_BC6H_TYPELESS              : return DDS_FORMAT_TYPE_TYPELESS;
	case DDS_DXGI_FORMAT_BC6H_UF16                  : return DDS_FORMAT_TYPE_COMPRESSED;
	case DDS_DXGI_FORMAT_BC6H_SF16                  : return DDS_FORMAT_TYPE_COMPRESSED;
	case DDS_DXGI_FORMAT_BC7_TYPELESS               : return DDS_FORMAT_TYPE_TYPELESS;
	case DDS_DXGI_FORMAT_BC7_UNORM                  : return DDS_FORMAT_TYPE_COMPRESSED;
	case DDS_DXGI_FORMAT_BC7_UNORM_SRGB             : return DDS_FORMAT_TYPE_COMPRESSED;
	case DDS_DXGI_FORMAT_AYUV                       : return DDS_FORMAT_TYPE_OTHER;
	case DDS_DXGI_FORMAT_Y410                       : return DDS_FORMAT_TYPE_OTHER;
	case DDS_DXGI_FORMAT_Y416                       : return DDS_FORMAT_TYPE_OTHER;
	case DDS_DXGI_FORMAT_NV12                       : return DDS_FORMAT_TYPE_OTHER;
	case DDS_DXGI_FORMAT_P010                       : return DDS_FORMAT_TYPE_OTHER;
	case DDS_DXGI_FORMAT_P016                       : return DDS_FORMAT_TYPE_OTHER;
	case DDS_DXGI_FORMAT_420_OPAQUE                 : return DDS_FORMAT_TYPE_OTHER;
	case DDS_DXGI_FORMAT_YUY2                       : return DDS_FORMAT_TYPE_OTHER;
	case DDS_DXGI_FORMAT_Y210                       : return DDS_FORMAT_TYPE_OTHER;
	case DDS_DXGI_FORMAT_Y216                       : return DDS_FORMAT_TYPE_OTHER;
	case DDS_DXGI_FORMAT_NV11                       : return DDS_FORMAT_TYPE_OTHER;
	case DDS_DXGI_FORMAT_AI44                       : return DDS_FORMAT_TYPE_OTHER;
	case DDS_DXGI_FORMAT_IA44                       : return DDS_FORMAT_TYPE_OTHER;
	case DDS_DXGI_FORMAT_P8                         : return DDS_FORMAT_TYPE_OTHER;
	case DDS_DXGI_FORMAT_A8P8                       : return DDS_FORMAT_TYPE_OTHER;
	case DDS_DXGI_FORMAT_B4G4R4A4_UNORM             : return DDS_FORMAT_TYPE_UNORM;
	case DDS_DXGI_FORMAT_R10G10B10_7E3_A2_FLOAT     : return DDS_FORMAT_TYPE_FLOAT;
	case DDS_DXGI_FORMAT_R10G10B10_6E4_A2_FLOAT     : return DDS_FORMAT_TYPE_FLOAT;
	default                                         : return DDS_FORMAT_TYPE_UNKNOWN;
	}
}